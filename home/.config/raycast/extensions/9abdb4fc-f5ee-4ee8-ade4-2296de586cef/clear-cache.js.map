{
  "version": 3,
  "sources": ["../src/clear-cache.tsx", "../src/utils/cache.ts", "../src/utils/common.ts"],
  "sourcesContent": ["import { closeMainWindow, showToast, Toast } from \"@raycast/api\";\n\nimport { Cache } from \"./utils/cache\";\n\nexport default async function ClearCache() {\n  await closeMainWindow();\n\n  await showToast(Toast.Style.Animated, \"Clearing cache\");\n\n  Cache.invalidateMessages();\n  Cache.invalidateAccounts();\n\n  await showToast(Toast.Style.Success, \"All mails and accounts cleared from cache\");\n}\n", "import { Cache as RaycastCache } from \"@raycast/api\";\n\nimport { Account, Message } from \"../types\";\nimport { messageLimit } from \"./common\";\n\nexport enum ExpirationTime {\n  Minute = 60 * 1000,\n  Hour = 60 * Minute,\n  Day = 24 * Hour,\n  Week = 7 * Day,\n}\n\nconst CACHE_VERSION = 1;\n\nconst isCacheExpired = (time: number, limit = ExpirationTime.Day): boolean => {\n  return Date.now() - time > limit;\n};\n\nconst accounts = new RaycastCache();\n\nconst invalidateAccounts = () => {\n  accounts.clear();\n};\n\nconst getAccounts = (): Account[] | undefined => {\n  if (accounts.has(\"accounts\")) {\n    const response = accounts.get(\"accounts\");\n    if (response) {\n      const { time, data, version } = JSON.parse(response);\n      if (!isCacheExpired(time) && version === CACHE_VERSION) {\n        return data;\n      }\n    }\n  }\n\n  return undefined;\n};\n\nconst getAccount = (idOrName: string): Account | undefined => {\n  return getAccounts()?.find((x) => x.id === idOrName || x.name === idOrName);\n};\n\nconst setAccounts = (data: Account[]) => {\n  accounts.set(\"accounts\", JSON.stringify({ time: Date.now(), data: data, version: CACHE_VERSION }));\n};\n\nconst messages = new RaycastCache();\n\nconst invalidateMessages = () => {\n  messages.clear();\n};\n\nconst getMessages = (account: string, mailbox: string): Message[] => {\n  const key = `${account}-${mailbox}`;\n  if (messages.has(key)) {\n    const response = messages.get(key);\n    if (response) {\n      const { time, data, version } = JSON.parse(response);\n      if (!isCacheExpired(time) && version === CACHE_VERSION) {\n        return data.slice(0, messageLimit);\n      }\n    }\n  }\n\n  return [];\n};\n\nconst setMessages = (data: Message[], account: string, mailbox: string) => {\n  const key = `${account}-${mailbox}`;\n  messages.set(key, JSON.stringify({ time: Date.now(), data: data, version: CACHE_VERSION }));\n};\n\nconst addMessage = (data: Message, account: string, mailbox: string) => {\n  const currentMessages = getMessages(account, mailbox);\n  const nextMessages = [...currentMessages, data];\n\n  setMessages(nextMessages, account, mailbox);\n};\n\nconst updateMessage = (id: string, data: Message, account: string, mailbox: string) => {\n  const currentMessages = getMessages(account, mailbox);\n  const nextMessages = currentMessages.map((currentMessage) => {\n    if (currentMessage.id === id) {\n      return { ...currentMessage, ...data };\n    }\n\n    return currentMessage;\n  });\n\n  setMessages(nextMessages, account, mailbox);\n};\n\nconst deleteMessage = (id: string, account: string, mailbox: string) => {\n  const currentMessages = getMessages(account, mailbox);\n  const nextMessages = currentMessages.filter((currentMessage) => currentMessage.id !== id);\n\n  setMessages(nextMessages, account, mailbox);\n};\n\nconst defaultAccount = new RaycastCache();\n\nconst getDefaultAccount = (): Account | undefined => {\n  const accounts = getAccounts();\n\n  if (!accounts || accounts.length === 0) {\n    return undefined;\n  }\n\n  const defaultAccountId = defaultAccount.get(\"default-account-id\");\n\n  if (defaultAccountId) {\n    const account = accounts.find((account) => account.id === defaultAccountId);\n    if (account) return account;\n  }\n\n  return accounts[0];\n};\n\nconst setDefaultAccount = (id: string) => {\n  defaultAccount.set(\"default-account-id\", id);\n};\n\nexport const Cache = Object.freeze({\n  getAccounts,\n  setAccounts,\n  getDefaultAccount,\n  setDefaultAccount,\n  getAccount,\n  invalidateAccounts,\n  getMessages,\n  setMessages,\n  addMessage,\n  updateMessage,\n  deleteMessage,\n  invalidateMessages,\n});\n", "import { getPreferenceValues, Icon } from \"@raycast/api\";\n\nimport { AnyFn } from \"../types\";\n\nexport const getIconByType = (type: string | undefined): string | Icon => {\n  if (type) {\n    switch (type) {\n      case \"image\":\n        return Icon.Image;\n      case \"video\":\n        return Icon.Video;\n      case \"audio\":\n        return Icon.SpeakerOn;\n      case \"text\":\n      case \"application\":\n        return Icon.Document;\n      default:\n        return Icon.Paperclip;\n    }\n  } else {\n    return Icon.Paperclip;\n  }\n};\n\nexport const invoke = <T>(fn: AnyFn<T>) => {\n  return fn();\n};\n\nconst { messageLimit: msgLimit } = getPreferenceValues<Preferences>();\nexport const messageLimit = parseInt(msgLimit);\n"],
  "mappings": "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",
  "names": ["clear_cache_exports", "__export", "ClearCache", "__toCommonJS", "import_api", "import_api", "import_api", "msgLimit", "messageLimit", "CACHE_VERSION", "isCacheExpired", "time", "limit", "accounts", "RaycastCache", "invalidateAccounts", "getAccounts", "response", "data", "version", "getAccount", "idOrName", "x", "setAccounts", "messages", "invalidateMessages", "getMessages", "account", "mailbox", "key", "messageLimit", "setMessages", "addMessage", "nextMessages", "updateMessage", "id", "currentMessage", "deleteMessage", "defaultAccount", "getDefaultAccount", "defaultAccountId", "setDefaultAccount", "Cache", "ClearCache", "Cache"]
}
