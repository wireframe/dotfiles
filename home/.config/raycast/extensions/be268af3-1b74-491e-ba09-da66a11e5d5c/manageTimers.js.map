{
  "version": 3,
  "sources": ["../src/manageTimers.tsx", "../src/hooks/useTimers.ts", "../src/backend/timerBackend.ts", "../src/backend/formatUtils.ts", "../src/backend/utils.ts", "../src/startCustomTimer.tsx", "../src/backend/soundData.ts", "../src/components/RunningTimerListItem.tsx", "../src/components/RenameAction.tsx", "../src/components/RenameView.tsx", "../src/backend/stopwatchBackend.ts", "../src/components/CustomTimerListItem.tsx"],
  "sourcesContent": ["import { Action, ActionPanel, Icon, LaunchProps, List, Toast, popToRoot, showToast, useNavigation } from \"@raycast/api\";\nimport { useEffect } from \"react\";\nimport useTimers from \"./hooks/useTimers\";\nimport CustomTimerView from \"./startCustomTimer\";\nimport { CommandLinkParams } from \"./backend/types\";\nimport { readCustomTimers, startTimer } from \"./backend/timerBackend\";\nimport RunningTimerListItem from \"./components/RunningTimerListItem\";\nimport CustomTimerListItem from \"./components/CustomTimerListItem\";\n\nexport default function Command(props: LaunchProps<{ launchContext: CommandLinkParams }>) {\n  if (props.launchContext?.timerID) {\n    const customTimers = readCustomTimers();\n    const ct = customTimers[props.launchContext.timerID];\n    if (ct == undefined) {\n      showToast({\n        style: Toast.Style.Failure,\n        title: \"This custom timer no longer exists!\",\n      });\n    } else {\n      startTimer({\n        timeInSeconds: ct.timeInSeconds,\n        timerName: ct.name,\n        selectedSound: ct.selectedSound,\n      }).then(() => popToRoot());\n      return;\n    }\n  }\n\n  const { timers, customTimers, isLoading, refreshTimers } = useTimers();\n  const { push } = useNavigation();\n\n  useEffect(() => {\n    refreshTimers();\n    setInterval(() => {\n      refreshTimers();\n    }, 1000);\n  }, []);\n\n  return (\n    <List isLoading={isLoading}>\n      <List.Section title={timers?.length !== 0 && timers != null ? \"Currently Running\" : \"No Timers Running\"}>\n        {timers?.map((timer) => <RunningTimerListItem key={timer.originalFile} timer={timer} />)}\n        <List.Item\n          key={0}\n          icon={Icon.Clock}\n          title={\"Create a new timer\"}\n          subtitle={\"Press Enter to start a timer\"}\n          actions={\n            <ActionPanel>\n              <Action\n                title=\"Start Timer\"\n                icon={Icon.Hourglass}\n                onAction={() => push(<CustomTimerView arguments={{ hours: \"\", minutes: \"\", seconds: \"\" }} />)}\n              />\n            </ActionPanel>\n          }\n        />\n      </List.Section>\n      <List.Section title=\"Custom Timers\">\n        {Object.keys(customTimers)\n          ?.sort((a, b) => {\n            return customTimers[a].timeInSeconds - customTimers[b].timeInSeconds;\n          })\n          .map((ctID) => <CustomTimerListItem key={ctID} customTimer={customTimers[ctID]} id={ctID} />)}\n      </List.Section>\n    </List>\n  );\n}\n", "import { useState } from \"react\";\nimport {\n  checkForOverlyLoudAlert,\n  createCustomTimer,\n  deleteCustomTimer,\n  ensureCTFileExists,\n  getTimers,\n  pauseTimer,\n  readCustomTimers,\n  startTimer,\n  stopTimer,\n  toggleCustomTimerMenubarVisibility,\n  unpauseTimer,\n} from \"../backend/timerBackend\";\nimport { CTLaunchConfig, CustomTimer, Timer, TimerLaunchConfig } from \"../backend/types\";\nimport { Alert, Icon, Toast, confirmAlert, showToast } from \"@raycast/api\";\n\nexport default function useTimers() {\n  const [timers, setTimers] = useState<Timer[] | undefined>(undefined);\n  const [customTimers, setCustomTimers] = useState<Record<string, CustomTimer>>({});\n  const [isLoading, setIsLoading] = useState<boolean>(timers === undefined);\n\n  const refreshTimers = () => {\n    ensureCTFileExists();\n    const setOfTimers: Timer[] = getTimers();\n    setTimers(setOfTimers);\n    const setOfCustomTimers: Record<string, CustomTimer> = readCustomTimers();\n    setCustomTimers(setOfCustomTimers);\n    setIsLoading(false);\n  };\n\n  const handleStartTimer = (launchConf: TimerLaunchConfig) => {\n    if (!checkForOverlyLoudAlert(launchConf.launchedFromMenuBar)) return;\n    startTimer(launchConf);\n    refreshTimers();\n  };\n\n  const handleStopTimer = (timer: Timer) => {\n    setTimers(timers?.filter((t: Timer) => t.originalFile !== timer.originalFile));\n    stopTimer(timer.originalFile);\n    refreshTimers();\n  };\n\n  const handlePauseTimer = (timer: Timer) => {\n    // cannot migrate old timers as we don't know PID\n    if (timer.pid == undefined && timer.lastPaused === \"---\")\n      return showToast({\n        style: Toast.Style.Failure,\n        title: \"This timer does not support pausing. Try restarting it to enable pausing.\",\n      });\n    pauseTimer(timer.originalFile, timer.pid!);\n    refreshTimers();\n  };\n\n  const handleUnpauseTimer = (timer: Timer) => {\n    // cannot migrate old timers as we don't know PID\n    if (timer.pid == undefined && timer.lastPaused === \"---\")\n      return showToast({\n        style: Toast.Style.Failure,\n        title: \"This timer does not support pausing. Try restarting it to enable pausing.\",\n      });\n    unpauseTimer(timer);\n    refreshTimers();\n  };\n\n  const handleStartCT = ({ customTimer, launchedFromMenuBar }: CTLaunchConfig) => {\n    if (!checkForOverlyLoudAlert(launchedFromMenuBar)) return;\n    startTimer({\n      timeInSeconds: customTimer.timeInSeconds,\n      launchedFromMenuBar: launchedFromMenuBar,\n      timerName: customTimer.name,\n      selectedSound: customTimer.selectedSound,\n    });\n    refreshTimers();\n  };\n\n  const handleCreateCT = (timer: Timer) => {\n    // TODO: make it possible to provide selected sound into CustomTimer\n    const customTimer: CustomTimer = {\n      name: timer.name,\n      timeInSeconds: timer.secondsSet,\n      selectedSound: \"default\",\n      showInMenuBar: true,\n    };\n    createCustomTimer(customTimer);\n    refreshTimers();\n  };\n\n  const handleDeleteCT = async (ctID: string) => {\n    const options: Alert.Options = {\n      title: \"Delete this preset?\",\n      icon: Icon.Trash,\n      message: \"You won't be able to recover it.\",\n      dismissAction: { title: \"Cancel\", style: Alert.ActionStyle.Cancel },\n      primaryAction: { title: \"Delete\", style: Alert.ActionStyle.Destructive },\n    };\n    if (await confirmAlert(options)) {\n      deleteCustomTimer(ctID);\n      refreshTimers();\n    }\n  };\n\n  const handleToggleCTVisibility = async (ctID: string) => {\n    toggleCustomTimerMenubarVisibility(ctID);\n    refreshTimers();\n  };\n\n  return {\n    timers,\n    customTimers,\n    isLoading,\n    refreshTimers,\n    handleStartTimer,\n    handlePauseTimer,\n    handleUnpauseTimer,\n    handleStopTimer,\n    handleStartCT,\n    handleCreateCT,\n    handleDeleteCT,\n    handleToggleCTVisibility,\n  };\n}\n", "import { environment, getPreferenceValues } from \"@raycast/api\";\nimport { exec } from \"child_process\";\nimport { randomUUID } from \"crypto\";\nimport { existsSync, readdirSync, readFileSync, unlinkSync, writeFileSync } from \"fs\";\nimport { extname } from \"path\";\nimport { CustomTimer, Preferences, RawTimer, Timer, TimerLaunchConfig } from \"./types\";\nimport { formatTime, secondsBetweenDates } from \"./formatUtils\";\nimport { showHudOrToast, showInitialRingContinuouslyWarning } from \"./utils\";\nimport { kill } from \"process\";\n\nconst DATAPATH = environment.supportPath + \"/customTimers.json\";\nconst DEFAULT_PRESET_VISIBLES_FILE = environment.supportPath + \"/defaultPresetVisibles.json\";\n\nconst silentFileDeletion = (fp: string) => {\n  try {\n    unlinkSync(fp);\n  } catch (err) {\n    // only throw if it's not a \"file doesn't exist\" error\n    if (err instanceof Error && !err.message.includes(\"ENOENT\")) throw err;\n  }\n};\n\nconst checkForOverlyLoudAlert = (launchedFromMenuBar = false) => {\n  const prefs = getPreferenceValues<Preferences>();\n  if (parseFloat(prefs.volumeSetting) > 5.0) {\n    const errorMsg = \"Timer alert volume should not be louder than 5 (it can get quite loud!)\";\n    showHudOrToast({ msg: errorMsg, launchedFromMenuBar: launchedFromMenuBar, isErr: true });\n    return false;\n  }\n  return true;\n};\n\nasync function startTimer({\n  timeInSeconds,\n  timerName = \"Untitled\",\n  launchedFromMenuBar = false,\n  selectedSound = \"default\",\n  skipRingContinuouslyWarning = false,\n}: TimerLaunchConfig) {\n  if (!skipRingContinuouslyWarning) {\n    if (!(await showInitialRingContinuouslyWarning())) return;\n  }\n  const fileName = environment.supportPath + \"/\" + new Date().toISOString() + \"---\" + timeInSeconds + \".timer\";\n  const masterName = fileName.replace(/:/g, \"__\");\n\n  const prefs = getPreferenceValues<Preferences>();\n  if (prefs.ringContinuously) {\n    const dismissFile = `${masterName}`.replace(\".timer\", \".dismiss\");\n    writeFileSync(dismissFile, \".dismiss file for Timers\");\n  }\n\n  const cmd = buildTimerCommand(masterName, timerName, timeInSeconds, selectedSound);\n\n  const process = exec(cmd, (error, stderr) => {\n    if (error) {\n      console.log(`error: ${error.message}`);\n      return;\n    }\n    if (stderr) {\n      console.log(`stderr: ${stderr}`);\n      return;\n    }\n  });\n\n  const fileContents: RawTimer = {\n    name: timerName,\n    pid: process.pid,\n    lastPaused: \"---\",\n    pauseElapsed: 0,\n    selectedSound: selectedSound === \"default\" ? prefs.selectedSound : selectedSound,\n  };\n  writeFileSync(masterName, JSON.stringify(fileContents));\n  showHudOrToast({\n    msg: `Timer \"${timerName}\" started for ${formatTime(timeInSeconds)}!`,\n    launchedFromMenuBar: launchedFromMenuBar,\n    isErr: false,\n  });\n}\n\nfunction buildTimerCommand(\n  masterName: string,\n  timerName: string,\n  timeInSeconds: number,\n  selectedSound: string,\n): string {\n  const prefs = getPreferenceValues<Preferences>();\n  const selectedSoundPath = `${\n    environment.assetsPath + \"/\" + (selectedSound === \"default\" ? prefs.selectedSound : selectedSound)\n  }`;\n  const cmdParts = [`sleep ${timeInSeconds}`];\n  cmdParts.push(\n    `if [ -f \"${masterName}\" ]; then osascript -e 'display notification \"Timer \\\\\"${timerName}\\\\\" complete\" with title \"Ding!\"'`,\n  );\n  const alertSoundString =\n    prefs.selectedSound === \"speak_timer_name\"\n      ? `say ${timerName}`\n      : `afplay \"${selectedSoundPath}\" --volume ${prefs.volumeSetting.replace(\",\", \".\")}`;\n  cmdParts.push(alertSoundString);\n  if (prefs.ringContinuously) {\n    const dismissFile = `${masterName}`.replace(\".timer\", \".dismiss\");\n    cmdParts.push(`while [ -f \"${dismissFile}\" ]; do ${alertSoundString}; done`);\n  }\n  cmdParts.push(`rm \"${masterName}\"; else echo \"Timer deleted\"; fi`);\n  return cmdParts.join(\" ; \");\n}\n\nfunction stopTimer(timerFile: string) {\n  const timerFilePath = environment.supportPath + \"/\" + timerFile;\n  const dismissFile = timerFilePath.replace(\".timer\", \".dismiss\");\n  silentFileDeletion(timerFilePath);\n  silentFileDeletion(dismissFile);\n}\n\nfunction pauseTimer(timerFile: string, timerPid: number) {\n  const timerFilePath = environment.supportPath + \"/\" + timerFile;\n  kill(timerPid);\n\n  const rawFileContents = readFileSync(timerFilePath).toString();\n  const fileContents: RawTimer = JSON.parse(rawFileContents);\n  fileContents.pid = undefined;\n  fileContents.lastPaused = new Date();\n  writeFileSync(timerFilePath, JSON.stringify(fileContents));\n}\n\nfunction unpauseTimer(timer: Timer) {\n  const timerFilePath = environment.supportPath + \"/\" + timer.originalFile;\n\n  const cmd = buildTimerCommand(timerFilePath, timer.name, timer.timeLeft, timer.selectedSound);\n  const process = exec(cmd);\n\n  const rawFileContents = readFileSync(timerFilePath).toString();\n  const fileContents: RawTimer = JSON.parse(rawFileContents);\n  fileContents.pauseElapsed = fileContents.pauseElapsed + secondsBetweenDates({ d2: timer.lastPaused });\n  fileContents.lastPaused = \"---\";\n  fileContents.pid = process.pid;\n  writeFileSync(timerFilePath, JSON.stringify(fileContents));\n}\n\nfunction getTimers() {\n  const setOfTimers: Timer[] = [];\n  const files = readdirSync(environment.supportPath);\n  files.forEach((timerFile: string) => {\n    if (extname(timerFile) == \".timer\") {\n      const timer: Timer = {\n        name: \"\",\n        secondsSet: -99,\n        timeLeft: -99,\n        originalFile: timerFile,\n        timeEnds: new Date(),\n        pid: undefined,\n        lastPaused: \"---\",\n        pauseElapsed: 0,\n        selectedSound: \"default\",\n      };\n      const rawFileContents = readFileSync(environment.supportPath + \"/\" + timerFile).toString();\n      try {\n        const fileContents: RawTimer = JSON.parse(rawFileContents);\n        timer.name = fileContents.name;\n        timer.pid = fileContents.pid;\n        timer.lastPaused = fileContents.lastPaused;\n        timer.pauseElapsed = fileContents.pauseElapsed;\n        timer.selectedSound = fileContents.selectedSound;\n      } catch (error) {\n        if (!(error instanceof SyntaxError)) throw error;\n        timer.name = rawFileContents;\n      }\n\n      const timerFileParts = timerFile.split(\"---\");\n      timer.secondsSet = Number(timerFileParts[1].split(\".\")[0]);\n      const timeStarted = timerFileParts[0].replace(/__/g, \":\");\n      timer.timeEnds = new Date(timeStarted);\n      timer.timeEnds.setSeconds(timer.timeEnds.getSeconds() + timer.secondsSet + timer.pauseElapsed);\n      timer.timeLeft = Math.max(\n        0,\n        Math.round(\n          timer.pid === undefined\n            ? timer.secondsSet -\n                secondsBetweenDates({\n                  d1: timer.lastPaused === \"---\" ? undefined : timer.lastPaused,\n                  d2: new Date(timeStarted),\n                }) +\n                timer.pauseElapsed\n            : secondsBetweenDates({ d1: timer.timeEnds }),\n        ),\n      );\n      setOfTimers.push(timer);\n    }\n  });\n  setOfTimers.sort((a, b) => {\n    return a.timeLeft - b.timeLeft;\n  });\n  return setOfTimers;\n}\n\nfunction renameTimer(timerFile: string, newName: string) {\n  const timerFilePath = environment.supportPath + \"/\" + timerFile;\n  const rawFileContents = readFileSync(timerFilePath).toString();\n  const fileContents: RawTimer = JSON.parse(rawFileContents);\n  fileContents.name = newName;\n  writeFileSync(timerFilePath, JSON.stringify(fileContents));\n}\n\nfunction ensureCTFileExists() {\n  if (!existsSync(DATAPATH)) {\n    writeFileSync(DATAPATH, JSON.stringify({}));\n  }\n}\n\nfunction createCustomTimer(newTimer: CustomTimer) {\n  ensureCTFileExists();\n  const customTimers = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  customTimers[randomUUID()] = newTimer;\n  writeFileSync(DATAPATH, JSON.stringify(customTimers));\n}\n\nfunction readCustomTimers() {\n  ensureCTFileExists();\n  const res: Record<string, CustomTimer> = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  return Object.fromEntries(\n    Object.entries(res).map(([ctID, timer]) =>\n      timer.showInMenuBar === undefined ? [ctID, { ...timer, showInMenuBar: true }] : [ctID, timer],\n    ),\n  );\n}\n\nfunction renameCustomTimer(ctID: string, newName: string) {\n  ensureCTFileExists();\n  const customTimers = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  customTimers[ctID].name = newName;\n  writeFileSync(DATAPATH, JSON.stringify(customTimers));\n}\n\nfunction deleteCustomTimer(ctID: string) {\n  ensureCTFileExists();\n  const customTimers = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  delete customTimers[ctID];\n  writeFileSync(DATAPATH, JSON.stringify(customTimers));\n}\n\nfunction toggleCustomTimerMenubarVisibility(ctID: string) {\n  ensureCTFileExists();\n  const customTimers = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  const currentVisibility = customTimers[ctID].showInMenuBar;\n  customTimers[ctID].showInMenuBar = currentVisibility === undefined ? false : !currentVisibility;\n  writeFileSync(DATAPATH, JSON.stringify(customTimers));\n}\n\nconst readDefaultPresetVisibles = (): Record<string, boolean> => {\n  if (!existsSync(DEFAULT_PRESET_VISIBLES_FILE)) {\n    const defaultPresetVisibles = {\n      \"2M\": true,\n      \"5M\": true,\n      \"10M\": true,\n      \"15M\": true,\n      \"30M\": true,\n      \"45M\": true,\n      \"60M\": true,\n      \"90M\": true,\n    };\n    writeFileSync(DEFAULT_PRESET_VISIBLES_FILE, JSON.stringify(defaultPresetVisibles));\n    return defaultPresetVisibles;\n  }\n  const res: Record<string, boolean> = JSON.parse(readFileSync(DEFAULT_PRESET_VISIBLES_FILE, \"utf8\"));\n  return res;\n};\n\nconst toggleDefaultPresetVisibility = (key: string) => {\n  const data: Record<string, boolean> = JSON.parse(readFileSync(DEFAULT_PRESET_VISIBLES_FILE, \"utf8\"));\n  data[key] = !data[key];\n  writeFileSync(DEFAULT_PRESET_VISIBLES_FILE, JSON.stringify(data));\n};\n\nexport {\n  checkForOverlyLoudAlert,\n  createCustomTimer,\n  deleteCustomTimer,\n  ensureCTFileExists,\n  getTimers,\n  readCustomTimers,\n  renameTimer,\n  renameCustomTimer,\n  toggleCustomTimerMenubarVisibility,\n  startTimer,\n  stopTimer,\n  pauseTimer,\n  unpauseTimer,\n  readDefaultPresetVisibles,\n  toggleDefaultPresetVisibility,\n};\n", "const formatTime = (seconds: number) => {\n  const hours = Math.floor(seconds / 3600);\n  const mins = String(Math.floor((seconds % 3600) / 60)).padStart(2, \"0\");\n  const secs = String(Math.floor(seconds % 60)).padStart(2, \"0\");\n  return `${hours === 0 ? \"\" : hours + \":\"}${mins}:${secs}`;\n};\n\nconst formatDateTime = (d: Date) => {\n  const parsedDate = new Date(d);\n  const datevalues = [\n    parsedDate.getFullYear().toString(),\n    (parsedDate.getMonth() + 1).toString().padStart(2, \"0\"),\n    parsedDate.getDate().toString().padStart(2, \"0\"),\n  ];\n  const timevalues = [parsedDate.getHours(), parsedDate.getMinutes(), parsedDate.getSeconds()].map((x) =>\n    x.toString().padStart(2, \"0\"),\n  );\n  const date = datevalues.join(\"-\");\n  const time = timevalues.join(\":\");\n  return `${date} ${time}`;\n};\n\nconst secondsBetweenDates = (args: { d1?: Date | string; d2?: Date | string }) => {\n  args.d1 = args.d1 == \"----\" ? undefined : args.d1;\n  args.d2 = args.d2 == \"----\" ? undefined : args.d2;\n  return (\n    Math.round(\n      (args.d1 ? new Date(args.d1) : new Date()).getTime() - (args.d2 ? new Date(args.d2) : new Date()).getTime(),\n    ) / 1000\n  );\n};\n\nexport { formatTime, formatDateTime, secondsBetweenDates };\n", "import {\n  Icon,\n  Toast,\n  confirmAlert,\n  environment,\n  getPreferenceValues,\n  popToRoot,\n  showHUD,\n  showToast,\n} from \"@raycast/api\";\nimport { Preferences } from \"./types\";\nimport { existsSync, writeFileSync } from \"fs\";\n\nconst shortCircuitMenuBar = <T>(state: T[] | undefined, prefs: Preferences): boolean => {\n  return (\n    (state == undefined || state.length == 0 || state.length == undefined) &&\n    ![\"always\", \"onlyWhenNotRunning\"].includes(prefs.showMenuBarIconWhen)\n  );\n};\n\nconst showHudOrToast = (args: { msg: string; launchedFromMenuBar: boolean; isErr: boolean }) => {\n  const prefs: Preferences = getPreferenceValues();\n  if (args.launchedFromMenuBar || prefs.closeWindowOnTimerStart) {\n    const msgEmoji = args.isErr ? \"\u26A0\uFE0F\" : \"\uD83C\uDF89\";\n    showHUD(`${msgEmoji} ${args.msg}`);\n    return popToRoot();\n  } else {\n    showToast({ style: args.isErr ? Toast.Style.Failure : Toast.Style.Success, title: args.msg });\n  }\n};\n\nconst showInitialRingContinuouslyWarning = async (): Promise<boolean> => {\n  const RINGCONTINUOUSLY_SHOWN_PATH = environment.supportPath + \"/ringContinuouslyWarningShown\";\n  const prefs = getPreferenceValues<Preferences>();\n  if (!prefs.ringContinuously) return true;\n  if (existsSync(RINGCONTINUOUSLY_SHOWN_PATH)) return true;\n\n  const result = await confirmAlert({\n    title: \"Ring Continuously is enabled!\",\n    icon: Icon.Bell,\n    message:\n      'When the timer rings, you will need to use the \"Stop Running Timer\" command or stop the timer in the \"Manage Timers\" command to dismiss the sound. You can configure this in your Raycast settings.',\n  });\n  if (result) writeFileSync(RINGCONTINUOUSLY_SHOWN_PATH, \"\");\n  return result;\n};\n\nexport { shortCircuitMenuBar, showHudOrToast, showInitialRingContinuouslyWarning };\n", "import { Action, ActionPanel, Form, getPreferenceValues, Toast, useNavigation } from \"@raycast/api\";\nimport { useState } from \"react\";\nimport { soundData } from \"./backend/soundData\";\nimport { checkForOverlyLoudAlert, createCustomTimer, ensureCTFileExists, startTimer } from \"./backend/timerBackend\";\nimport { CTInlineArgs, InputField, Preferences, RayFormEvent, Values } from \"./backend/types\";\n\nexport default function CustomTimerView(props: { arguments: CTInlineArgs }) {\n  const hasArgs = Object.values(props.arguments).some((x) => x !== \"\");\n  const [hourErr, setHourErr] = useState<string | undefined>();\n  const [minErr, setMinErr] = useState<string | undefined>();\n  const [secErr, setSecErr] = useState<string | undefined>();\n  const { pop } = useNavigation();\n\n  const prefs: Preferences = getPreferenceValues();\n\n  if (hasArgs && prefs.customTimerFormBypass) {\n    const [hours, minutes, seconds] = ([\"hours\", \"minutes\", \"seconds\"] as const)\n      .map((k) => props.arguments[k])\n      .map(Number)\n      .map((n) => (Number.isNaN(n) ? 0 : n));\n\n    startTimer({ timeInSeconds: 3600 * hours + 60 * minutes + seconds });\n\n    return null;\n  }\n\n  const handleSubmit = (values: Values) => {\n    ensureCTFileExists();\n    if (values.hours === \"\" && values.minutes === \"\" && values.seconds === \"\") {\n      const toast = new Toast({ style: Toast.Style.Failure, title: \"No values set for timer length!\" });\n      toast.show();\n    } else if (isNaN(Number(values.hours))) {\n      setHourErr(\"Hours must be a number!\");\n    } else if (isNaN(Number(values.minutes))) {\n      setMinErr(\"Minutes must be a number!\");\n    } else if (isNaN(Number(values.seconds))) {\n      setSecErr(\"Seconds must be a number!\");\n    } else {\n      if (!checkForOverlyLoudAlert()) return;\n      const timerName = values.name ? values.name : \"Untitled\";\n      const timeInSeconds = 3600 * Number(values.hours) + 60 * Number(values.minutes) + Number(values.seconds);\n      startTimer({\n        timeInSeconds: timeInSeconds,\n        timerName: timerName,\n        selectedSound: values.selectedSound,\n      }).then(() => pop());\n      if (values.willBeSaved)\n        createCustomTimer({\n          name: values.name,\n          timeInSeconds: timeInSeconds,\n          selectedSound: values.selectedSound,\n          showInMenuBar: true,\n        });\n    }\n  };\n\n  const dropHourErrorIfNeeded = () => {\n    if (hourErr && hourErr.length > 0) {\n      setHourErr(undefined);\n    }\n  };\n\n  const dropMinErrorIfNeeded = () => {\n    if (minErr && minErr.length > 0) {\n      setMinErr(undefined);\n    }\n  };\n\n  const dropSecErrorIfNeeded = () => {\n    if (secErr && secErr.length > 0) {\n      setSecErr(undefined);\n    }\n  };\n\n  const hourValidator = (event: RayFormEvent) => {\n    const input = event.target.value;\n    if (isNaN(Number(input))) {\n      setHourErr(\"Hours must be a number!\");\n    } else {\n      dropHourErrorIfNeeded();\n    }\n  };\n\n  const minValidator = (event: RayFormEvent) => {\n    const input = event.target.value;\n    if (isNaN(Number(input))) {\n      setMinErr(\"Minutes must be a number!\");\n    } else {\n      dropMinErrorIfNeeded();\n    }\n  };\n\n  const secValidator = (event: RayFormEvent) => {\n    const input = event.target.value;\n    if (isNaN(Number(input))) {\n      setSecErr(\"Seconds must be a number!\");\n    } else {\n      dropSecErrorIfNeeded();\n    }\n  };\n\n  const inputFields: InputField[] = [\n    {\n      id: \"hours\",\n      title: \"Hours\",\n      placeholder: \"0\",\n      err: hourErr,\n      drop: dropHourErrorIfNeeded,\n      validator: hourValidator,\n    },\n    {\n      id: \"minutes\",\n      title: \"Minutes\",\n      placeholder: \"00\",\n      err: minErr,\n      drop: dropMinErrorIfNeeded,\n      validator: minValidator,\n    },\n    {\n      id: \"seconds\",\n      title: \"Seconds\",\n      placeholder: \"00\",\n      err: secErr,\n      drop: dropSecErrorIfNeeded,\n      validator: secValidator,\n    },\n  ];\n  const sortOrder = prefs.newTimerInputOrder;\n  sortOrder !== \"hhmmss\" ? inputFields.reverse() : inputFields;\n\n  return (\n    <Form\n      actions={\n        <ActionPanel>\n          <Action.SubmitForm title=\"Start Custom Timer\" onSubmit={(values: Values) => handleSubmit(values)} />\n        </ActionPanel>\n      }\n    >\n      {inputFields.map((item, index) => (\n        <Form.TextField\n          key={index}\n          id={item.id}\n          title={item.title}\n          placeholder={item.placeholder}\n          defaultValue={props.arguments[item.id]}\n          error={item.err}\n          onChange={item.drop}\n          onBlur={item.validator}\n        />\n      ))}\n      <Form.Dropdown id=\"selectedSound\" defaultValue=\"default\" title=\"Sound\">\n        <Form.Dropdown.Item value=\"default\" title=\"Default\" />\n        {soundData.map((item, index) => (\n          <Form.Dropdown.Item\n            key={index}\n            title={item.value === prefs.selectedSound ? `${item.title} (currently selected)` : item.title}\n            value={item.value}\n            icon={item.icon}\n          />\n        ))}\n      </Form.Dropdown>\n      <Form.TextField id=\"name\" title=\"Name\" placeholder=\"Pour Tea\" autoFocus={hasArgs} />\n      <Form.Checkbox id=\"willBeSaved\" label=\"Save as preset\" />\n    </Form>\n  );\n}\n", "import { SoundData } from \"./types\";\nimport { Icon } from \"@raycast/api\";\n\nconst soundData: SoundData[] = [\n  {\n    title: \"Alarm Clock\",\n    icon: Icon.Alarm,\n    value: \"alarmClock.wav\",\n  },\n  {\n    title: \"Dismembered Woodpecker\",\n    icon: Icon.Bird,\n    value: \"dismemberedWoodpecker.wav\",\n  },\n  {\n    title: \"Flute Riff\",\n    icon: Icon.Music,\n    value: \"fluteRiff.wav\",\n  },\n  {\n    title: \"Level Up\",\n    icon: Icon.Trophy,\n    value: \"levelUp.wav\",\n  },\n  {\n    title: \"Piano Chime\",\n    icon: Icon.Music,\n    value: \"pianoChime.wav\",\n  },\n  {\n    title: \"Terminator\",\n    icon: Icon.BarCode,\n    value: \"terminator.wav\",\n  },\n  {\n    title: \"Speak Timer Name\",\n    icon: Icon.Person,\n    value: \"speak_timer_name\",\n  },\n];\nexport { soundData };\n", "import { Action, ActionPanel, Color, Icon, List } from \"@raycast/api\";\nimport { Timer } from \"../backend/types\";\nimport { formatDateTime, formatTime } from \"../backend/formatUtils\";\nimport useTimers from \"../hooks/useTimers\";\nimport RenameAction from \"./RenameAction\";\n\ninterface RunningTimerListItemProps {\n  timer: Timer;\n}\n\nconst pausedLabel = { tag: { value: \"Paused\", color: Color.Red } };\nconst pausedIcon = { source: Icon.Clock, tintColor: Color.Red };\nconst runningIcon = { source: Icon.Clock, tintColor: Color.Yellow };\nconst runningLabel = { tag: { value: \"Running\", color: Color.Yellow } };\nconst finishedIcon = { source: Icon.Clock, tintColor: Color.Green };\nconst finishedLabel = { tag: { value: \"Finished!\", color: Color.Green } };\n\nexport default function RunningTimerListItem({ timer }: RunningTimerListItemProps) {\n  const { handlePauseTimer, handleUnpauseTimer, handleStopTimer, handleCreateCT } = useTimers();\n  return (\n    <List.Item\n      icon={timer.timeLeft === 0 ? finishedIcon : timer.lastPaused !== \"---\" ? pausedIcon : runningIcon}\n      title={timer.name}\n      subtitle={formatTime(timer.timeLeft) + \" left\"}\n      accessories={[\n        { text: formatTime(timer.secondsSet) + \" originally\" },\n        { text: `${timer.timeLeft === 0 ? \"Ended\" : \"Ends\"} at ${formatDateTime(timer.timeEnds)}` },\n        timer.timeLeft === 0 ? finishedLabel : timer.lastPaused !== \"---\" ? pausedLabel : runningLabel,\n      ]}\n      actions={\n        <ActionPanel>\n          {timer.timeLeft === 0 ? (\n            <Action title=\"Stop Timer\" icon={Icon.Stop} onAction={() => handleStopTimer(timer)} />\n          ) : (\n            <Action\n              title={(timer.lastPaused !== \"---\" ? \"Unpause\" : \"Pause\") + \" Timer\"}\n              icon={Icon.Pause}\n              onAction={timer.lastPaused !== \"---\" ? () => handleUnpauseTimer(timer) : () => handlePauseTimer(timer)}\n            />\n          )}\n          <RenameAction renameLabel={\"Timer\"} currentName={timer.name} originalFile={timer.originalFile} ctID={null} />\n          <Action\n            title=\"Stop Timer\"\n            icon={Icon.Stop}\n            shortcut={{\n              modifiers: [\"ctrl\"],\n              key: \"x\",\n            }}\n            onAction={() => handleStopTimer(timer)}\n          />\n          <Action\n            title=\"Save Timer as Preset\"\n            icon={Icon.SaveDocument}\n            shortcut={{\n              modifiers: [\"cmd\", \"shift\"],\n              key: \"enter\",\n            }}\n            onAction={() => handleCreateCT(timer)}\n          />\n        </ActionPanel>\n      }\n    />\n  );\n}\n", "import { Action, Icon, useNavigation } from \"@raycast/api\";\nimport { RenameView, RenameViewProps } from \"./RenameView\";\n\ninterface RenameActionProps extends RenameViewProps {\n  renameLabel: string;\n}\n\nexport default function RenameAction(props: RenameActionProps) {\n  const { push } = useNavigation();\n\n  return (\n    <Action\n      title={`Rename ${props.renameLabel}`}\n      icon={Icon.TextInput}\n      onAction={() =>\n        push(<RenameView currentName={props.currentName} originalFile={props.originalFile} ctID={props.ctID} />)\n      }\n    />\n  );\n}\n", "import { Action, ActionPanel, Form, Toast, useNavigation } from \"@raycast/api\";\nimport { renameStopwatch } from \"../backend/stopwatchBackend\";\nimport { renameCustomTimer, renameTimer } from \"../backend/timerBackend\";\nimport { showHudOrToast } from \"../backend/utils\";\n\ninterface RenameViewProps {\n  currentName: string;\n  originalFile: string;\n  ctID: string | null;\n}\n\nfunction RenameView(props: RenameViewProps) {\n  const { pop } = useNavigation();\n  const handleSubmit = (newName: string) => {\n    if (newName === \"\" || newName === props.currentName) {\n      const toast = new Toast({ style: Toast.Style.Failure, title: \"No new name given!\" });\n      toast.show();\n    } else {\n      pop();\n      switch (props.originalFile) {\n        case \"customTimer\":\n          renameCustomTimer(props.ctID ? props.ctID : \"-99\", newName);\n          break;\n        case \"stopwatch\":\n          renameStopwatch(props.ctID ? props.ctID : \"-99\", newName);\n          break;\n        default:\n          renameTimer(props.originalFile, newName);\n          break;\n      }\n\n      showHudOrToast({ msg: `Renamed to ${newName}!`, launchedFromMenuBar: false, isErr: false });\n    }\n  };\n\n  return (\n    <Form\n      actions={\n        <ActionPanel>\n          <Action.SubmitForm title=\"Rename\" onSubmit={(values: { newName: string }) => handleSubmit(values.newName)} />\n        </ActionPanel>\n      }\n    >\n      <Form.TextField id=\"newName\" title=\"New name\" placeholder={props.currentName} />\n    </Form>\n  );\n}\n\nexport { type RenameViewProps, RenameView };\n", "import { environment } from \"@raycast/api\";\nimport { execSync } from \"child_process\";\nimport { randomUUID } from \"crypto\";\nimport { existsSync, readdirSync, readFileSync, writeFileSync } from \"fs\";\nimport { extname } from \"path\";\nimport { secondsBetweenDates } from \"./formatUtils\";\nimport { Stopwatch, StopwatchLaunchConfig } from \"./types\";\nimport { showHudOrToast } from \"./utils\";\n\nconst SWPATH = environment.supportPath + \"/raycast-stopwatches.json\";\n\nconst ensureSWFileExists = () => {\n  if (!existsSync(SWPATH) || readFileSync(SWPATH).toString() == \"\") {\n    writeFileSync(SWPATH, \"[]\");\n  }\n};\n\nconst initStopwatch = (swName: string): Stopwatch => {\n  return {\n    name: swName,\n    swID: randomUUID(),\n    timeStarted: new Date(),\n    timeElapsed: -99,\n    lastPaused: \"----\",\n    pauseElapsed: 0,\n  };\n};\n\nconst processStopwatches = (swSet: Stopwatch[]) => {\n  swSet.map((x) => {\n    if (x.lastPaused != \"----\") {\n      x.timeElapsed = Math.max(0, secondsBetweenDates({ d1: x.lastPaused, d2: x.timeStarted }) - x.pauseElapsed);\n    } else {\n      const rawElapsedTime = Math.max(0, secondsBetweenDates({ d2: x.timeStarted }));\n      x.timeElapsed = rawElapsedTime - x.pauseElapsed;\n    }\n  });\n  return swSet;\n};\n\nconst getStopwatches = () => {\n  ensureSWFileExists();\n  const rawStopwatches: Stopwatch[] = JSON.parse(readFileSync(SWPATH).toString());\n  const fullStopwatchSet = cleanUpOldStopwatches(rawStopwatches);\n  const setOfStopwatches = processStopwatches(fullStopwatchSet);\n  setOfStopwatches.sort((a, b) => {\n    return a.timeElapsed - b.timeElapsed;\n  });\n  return setOfStopwatches;\n};\n\nconst startStopwatch = async ({ swName = \"Untitled\", launchedFromMenuBar = false }: StopwatchLaunchConfig) => {\n  ensureSWFileExists();\n  const swStore: Stopwatch[] = JSON.parse(readFileSync(SWPATH).toString());\n  const newTimer = initStopwatch(swName);\n  swStore.push(newTimer);\n  writeFileSync(SWPATH, JSON.stringify(swStore));\n\n  showHudOrToast({ msg: `Stopwatch \"${swName}\" started!`, launchedFromMenuBar: launchedFromMenuBar, isErr: false });\n};\n\nconst pauseStopwatch = (swToPause: string) => {\n  ensureSWFileExists();\n  let swStore: Stopwatch[] = JSON.parse(readFileSync(SWPATH).toString());\n  swStore = swStore.map((s) => (s.swID == swToPause ? { ...s, lastPaused: new Date() } : s));\n  writeFileSync(SWPATH, JSON.stringify(swStore));\n};\n\nconst unpauseStopwatch = (swToUnpause: string) => {\n  ensureSWFileExists();\n  let swStore: Stopwatch[] = JSON.parse(readFileSync(SWPATH).toString());\n  swStore = swStore.map((s) =>\n    s.swID == swToUnpause\n      ? {\n          ...s,\n          pauseElapsed: s.pauseElapsed + secondsBetweenDates({ d2: s.lastPaused }),\n          lastPaused: \"----\",\n        }\n      : s,\n  );\n  writeFileSync(SWPATH, JSON.stringify(swStore));\n};\n\nconst stopStopwatch = (swToDelete: string) => {\n  ensureSWFileExists();\n  let swStore: Stopwatch[] = JSON.parse(readFileSync(SWPATH).toString());\n  swStore = swStore.filter((s: Stopwatch) => s.swID !== swToDelete);\n  writeFileSync(SWPATH, JSON.stringify(swStore));\n};\n\nconst cleanUpOldStopwatches = (newStore: Stopwatch[]) => {\n  const files = readdirSync(environment.supportPath);\n  files.forEach((swFile: string) => {\n    if (extname(swFile) == \".stopwatch\") {\n      const stopwatch = initStopwatch(readFileSync(environment.supportPath + \"/\" + swFile).toString());\n      const timeStarted = swFile.replace(/__/g, \":\").replace(\".stopwatch\", \"\");\n      stopwatch.timeStarted = new Date(timeStarted);\n      stopwatch.timeElapsed = Math.max(0, secondsBetweenDates({}));\n      execSync(`rm \"${environment.supportPath}/${swFile}\"`);\n      newStore.push(stopwatch);\n    }\n  });\n  writeFileSync(SWPATH, JSON.stringify(newStore));\n  return newStore;\n};\n\nconst renameStopwatch = (swID: string, newName: string) => {\n  ensureSWFileExists();\n  const stopwatches: Stopwatch[] = JSON.parse(readFileSync(SWPATH, \"utf8\"));\n  const renamedSW = stopwatches.map((x) => (x.swID == swID ? { ...x, name: newName } : x));\n  writeFileSync(SWPATH, JSON.stringify(renamedSW));\n};\n\nexport { getStopwatches, pauseStopwatch, unpauseStopwatch, startStopwatch, stopStopwatch, renameStopwatch };\n", "import { Action, ActionPanel, Icon, List } from \"@raycast/api\";\nimport { CommandLinkParams, CustomTimer } from \"../backend/types\";\nimport { formatTime } from \"../backend/formatUtils\";\nimport useTimers from \"../hooks/useTimers\";\nimport RenameAction from \"./RenameAction\";\n\nconst createPresetLink = (ctID: string): string => {\n  const payload: CommandLinkParams = { timerID: ctID };\n  const encodedPayload = encodeURIComponent(JSON.stringify(payload));\n  return `raycast://extensions/ThatNerd/timers/manageTimers?context=${encodedPayload}`;\n};\n\nexport default function CustomTimerListItem(props: { customTimer: CustomTimer; id: string }) {\n  const { handleStartCT, handleDeleteCT } = useTimers();\n  return (\n    <List.Item\n      icon={Icon.Clock}\n      title={props.customTimer.name}\n      subtitle={formatTime(props.customTimer.timeInSeconds)}\n      actions={\n        <ActionPanel>\n          <Action\n            title=\"Start Timer\"\n            icon={Icon.Hourglass}\n            onAction={() => handleStartCT({ customTimer: props.customTimer })}\n          />\n          <RenameAction\n            renameLabel=\"Timer\"\n            currentName={props.customTimer.name}\n            originalFile={\"customTimer\"}\n            ctID={props.id}\n          />\n          <Action\n            title=\"Delete Custom Timer\"\n            icon={Icon.Trash}\n            shortcut={{\n              modifiers: [\"ctrl\"],\n              key: \"x\",\n            }}\n            onAction={() => handleDeleteCT(props.id)}\n          />\n          <Action.CreateQuicklink\n            quicklink={{\n              name: props.customTimer.name,\n              link: createPresetLink(props.id),\n            }}\n            title=\"Add Preset to Root Search\"\n          />\n        </ActionPanel>\n      }\n    />\n  );\n}\n"],
  "mappings": "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",
  "names": ["manageTimers_exports", "__export", "Command", "__toCommonJS", "import_api", "import_react", "import_react", "import_api", "import_child_process", "import_crypto", "import_fs", "import_path", "formatTime", "seconds", "hours", "mins", "secs", "formatDateTime", "d", "parsedDate", "datevalues", "timevalues", "x", "date", "time", "secondsBetweenDates", "args", "import_api", "import_fs", "showHudOrToast", "args", "prefs", "msgEmoji", "showInitialRingContinuouslyWarning", "RINGCONTINUOUSLY_SHOWN_PATH", "result", "import_process", "DATAPATH", "DEFAULT_PRESET_VISIBLES_FILE", "silentFileDeletion", "fp", "err", "checkForOverlyLoudAlert", "launchedFromMenuBar", "prefs", "showHudOrToast", "startTimer", "timeInSeconds", "timerName", "selectedSound", "skipRingContinuouslyWarning", "showInitialRingContinuouslyWarning", "masterName", "dismissFile", "cmd", "buildTimerCommand", "process", "error", "stderr", "fileContents", "formatTime", "selectedSoundPath", "cmdParts", "alertSoundString", "stopTimer", "timerFile", "timerFilePath", "pauseTimer", "timerPid", "rawFileContents", "unpauseTimer", "timer", "secondsBetweenDates", "getTimers", "setOfTimers", "timerFileParts", "timeStarted", "a", "b", "renameTimer", "newName", "ensureCTFileExists", "createCustomTimer", "newTimer", "customTimers", "readCustomTimers", "res", "ctID", "renameCustomTimer", "deleteCustomTimer", "toggleCustomTimerMenubarVisibility", "currentVisibility", "import_api", "useTimers", "timers", "setTimers", "customTimers", "setCustomTimers", "isLoading", "setIsLoading", "refreshTimers", "ensureCTFileExists", "setOfTimers", "getTimers", "setOfCustomTimers", "readCustomTimers", "launchConf", "checkForOverlyLoudAlert", "startTimer", "timer", "pauseTimer", "unpauseTimer", "t", "stopTimer", "customTimer", "launchedFromMenuBar", "createCustomTimer", "ctID", "options", "deleteCustomTimer", "toggleCustomTimerMenubarVisibility", "import_api", "import_react", "import_api", "soundData", "import_jsx_runtime", "CustomTimerView", "props", "hasArgs", "x", "hourErr", "setHourErr", "minErr", "setMinErr", "secErr", "setSecErr", "pop", "prefs", "hours", "minutes", "seconds", "k", "n", "startTimer", "handleSubmit", "values", "ensureCTFileExists", "checkForOverlyLoudAlert", "timerName", "timeInSeconds", "createCustomTimer", "dropHourErrorIfNeeded", "dropMinErrorIfNeeded", "dropSecErrorIfNeeded", "inputFields", "event", "input", "item", "index", "soundData", "import_api", "import_api", "import_api", "import_api", "import_fs", "SWPATH", "ensureSWFileExists", "renameStopwatch", "swID", "newName", "ensureSWFileExists", "renamedSW", "SWPATH", "x", "import_jsx_runtime", "RenameView", "props", "pop", "handleSubmit", "newName", "renameCustomTimer", "renameStopwatch", "renameTimer", "showHudOrToast", "values", "import_jsx_runtime", "RenameAction", "props", "push", "RenameView", "import_jsx_runtime", "pausedLabel", "pausedIcon", "runningIcon", "runningLabel", "finishedIcon", "finishedLabel", "RunningTimerListItem", "timer", "handlePauseTimer", "handleUnpauseTimer", "handleStopTimer", "handleCreateCT", "useTimers", "formatTime", "formatDateTime", "RenameAction", "import_api", "import_jsx_runtime", "createPresetLink", "ctID", "CustomTimerListItem", "props", "handleStartCT", "handleDeleteCT", "useTimers", "formatTime", "RenameAction", "import_jsx_runtime", "Command", "props", "ct", "readCustomTimers", "startTimer", "timers", "customTimers", "isLoading", "refreshTimers", "useTimers", "push", "timer", "RunningTimerListItem", "CustomTimerView", "a", "b", "ctID", "CustomTimerListItem"]
}
