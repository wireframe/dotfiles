{
  "version": 3,
  "sources": ["../src/manageStopwatches.tsx", "../src/hooks/useStopwatches.ts", "../src/backend/formatUtils.ts", "../src/backend/stopwatchBackend.ts", "../src/backend/utils.ts", "../src/components/RenameAction.tsx", "../src/components/RenameView.tsx", "../src/backend/timerBackend.ts"],
  "sourcesContent": ["import { Action, ActionPanel, Color, Icon, List } from \"@raycast/api\";\nimport { useEffect } from \"react\";\nimport useStopwatches from \"./hooks/useStopwatches\";\nimport { formatTime, formatDateTime } from \"./backend/formatUtils\";\nimport { Stopwatch } from \"./backend/types\";\nimport RenameAction from \"./components/RenameAction\";\n\nexport default function Command() {\n  const {\n    stopwatches,\n    isLoading,\n    refreshSWes,\n    handleRestartSW,\n    handleStartSW,\n    handleStopSW,\n    handlePauseSW,\n    handleUnpauseSW,\n  } = useStopwatches();\n\n  useEffect(() => {\n    refreshSWes();\n    setInterval(() => {\n      refreshSWes();\n    }, 1000);\n  }, []);\n\n  const pausedTag = { tag: { value: \"Paused\", color: Color.Red } };\n  const unpausedTag = { tag: { value: \"Running\", color: Color.Green } };\n  const pausedIcon = { source: Icon.Clock, tintColor: Color.Red };\n  const unpausedIcon = { source: Icon.Clock, tintColor: Color.Green };\n\n  return (\n    <List isLoading={isLoading}>\n      <List.Section\n        title={stopwatches?.length !== 0 && stopwatches != null ? \"Currently Running\" : \"No Stopwatches Running\"}\n      >\n        {stopwatches?.map((sw: Stopwatch) => (\n          <List.Item\n            key={sw.swID}\n            icon={sw.lastPaused == \"----\" ? unpausedIcon : pausedIcon}\n            title={sw.name}\n            subtitle={formatTime(sw.timeElapsed) + \" elapsed\"}\n            accessories={[\n              { text: \"Started at \" + formatDateTime(sw.timeStarted) },\n              sw.lastPaused == \"----\" ? unpausedTag : pausedTag,\n            ]}\n            actions={\n              <ActionPanel>\n                {sw.lastPaused == \"----\" ? (\n                  <Action title=\"Pause Stopwatch\" icon={Icon.Pause} onAction={() => handlePauseSW(sw.swID)} />\n                ) : (\n                  <Action title=\"Unpause Stopwatch\" icon={Icon.Play} onAction={() => handleUnpauseSW(sw.swID)} />\n                )}\n                <RenameAction renameLabel=\"Stopwatch\" currentName={sw.name} originalFile={\"stopwatch\"} ctID={sw.swID} />\n                <Action.CopyToClipboard\n                  title=\"Copy Current Time\"\n                  shortcut={{ modifiers: [\"cmd\"], key: \"c\" }}\n                  content={formatTime(sw.timeElapsed)}\n                />\n                <Action\n                  title=\"Restart Stopwatch\"\n                  icon={Icon.ArrowCounterClockwise}\n                  shortcut={{ modifiers: [\"cmd\"], key: \"r\" }}\n                  onAction={() => handleRestartSW(sw)}\n                />\n                <Action\n                  title=\"Stop Stopwatch\"\n                  icon={Icon.Stop}\n                  shortcut={{ modifiers: [\"ctrl\"], key: \"x\" }}\n                  onAction={() => handleStopSW(sw)}\n                />\n              </ActionPanel>\n            }\n          />\n        ))}\n        <List.Item\n          key={0}\n          icon={Icon.Clock}\n          title={\"Create a new stopwatch\"}\n          subtitle={\"Press Enter to start a stopwatch\"}\n          actions={\n            <ActionPanel>\n              <Action title=\"Start Stopwatch\" icon={Icon.Stopwatch} onAction={() => handleStartSW({})} />\n            </ActionPanel>\n          }\n        />\n      </List.Section>\n    </List>\n  );\n}\n", "import { Clipboard, getPreferenceValues } from \"@raycast/api\";\nimport { useState } from \"react\";\nimport { formatTime } from \"../backend/formatUtils\";\nimport {\n  getStopwatches,\n  pauseStopwatch,\n  startStopwatch,\n  stopStopwatch,\n  unpauseStopwatch,\n} from \"../backend/stopwatchBackend\";\nimport { Stopwatch, StopwatchLaunchConfig } from \"../backend/types\";\n\nexport default function useStopwatches() {\n  const [stopwatches, setStopwatches] = useState<Stopwatch[] | undefined>(undefined);\n  const [isLoading, setIsLoading] = useState<boolean>(stopwatches === undefined);\n\n  const refreshSWes = () => {\n    const setOfStopwatches: Stopwatch[] = getStopwatches();\n    setStopwatches(setOfStopwatches);\n    setIsLoading(false);\n  };\n\n  const handleStartSW = (launchConf: StopwatchLaunchConfig) => {\n    startStopwatch(launchConf);\n    refreshSWes();\n  };\n\n  const handlePauseSW = (swID: string) => {\n    pauseStopwatch(swID);\n    refreshSWes();\n  };\n\n  const handleUnpauseSW = (swID: string) => {\n    unpauseStopwatch(swID);\n    refreshSWes();\n  };\n\n  const handleStopSW = (stopwatch: Stopwatch) => {\n    const prefs = getPreferenceValues();\n    if (prefs.copyOnSwStop) {\n      Clipboard.copy(formatTime(stopwatch.timeElapsed));\n    }\n    stopStopwatch(stopwatch.swID);\n    refreshSWes();\n  };\n\n  const handleRestartSW = (stopwatch: Stopwatch) => {\n    handleStopSW(stopwatch);\n    handleStartSW({ swName: stopwatch.name, launchedFromMenuBar: false });\n    refreshSWes();\n  };\n\n  return {\n    stopwatches,\n    isLoading,\n    refreshSWes,\n    handleRestartSW,\n    handleStartSW,\n    handleStopSW,\n    handlePauseSW,\n    handleUnpauseSW,\n  };\n}\n", "const formatTime = (seconds: number) => {\n  const hours = Math.floor(seconds / 3600);\n  const mins = String(Math.floor((seconds % 3600) / 60)).padStart(2, \"0\");\n  const secs = String(Math.floor(seconds % 60)).padStart(2, \"0\");\n  return `${hours === 0 ? \"\" : hours + \":\"}${mins}:${secs}`;\n};\n\nconst formatDateTime = (d: Date) => {\n  const parsedDate = new Date(d);\n  const datevalues = [\n    parsedDate.getFullYear().toString(),\n    (parsedDate.getMonth() + 1).toString().padStart(2, \"0\"),\n    parsedDate.getDate().toString().padStart(2, \"0\"),\n  ];\n  const timevalues = [parsedDate.getHours(), parsedDate.getMinutes(), parsedDate.getSeconds()].map((x) =>\n    x.toString().padStart(2, \"0\"),\n  );\n  const date = datevalues.join(\"-\");\n  const time = timevalues.join(\":\");\n  return `${date} ${time}`;\n};\n\nconst secondsBetweenDates = (args: { d1?: Date | string; d2?: Date | string }) => {\n  args.d1 = args.d1 == \"----\" ? undefined : args.d1;\n  args.d2 = args.d2 == \"----\" ? undefined : args.d2;\n  return (\n    Math.round(\n      (args.d1 ? new Date(args.d1) : new Date()).getTime() - (args.d2 ? new Date(args.d2) : new Date()).getTime(),\n    ) / 1000\n  );\n};\n\nexport { formatTime, formatDateTime, secondsBetweenDates };\n", "import { environment } from \"@raycast/api\";\nimport { execSync } from \"child_process\";\nimport { randomUUID } from \"crypto\";\nimport { existsSync, readdirSync, readFileSync, writeFileSync } from \"fs\";\nimport { extname } from \"path\";\nimport { secondsBetweenDates } from \"./formatUtils\";\nimport { Stopwatch, StopwatchLaunchConfig } from \"./types\";\nimport { showHudOrToast } from \"./utils\";\n\nconst SWPATH = environment.supportPath + \"/raycast-stopwatches.json\";\n\nconst ensureSWFileExists = () => {\n  if (!existsSync(SWPATH) || readFileSync(SWPATH).toString() == \"\") {\n    writeFileSync(SWPATH, \"[]\");\n  }\n};\n\nconst initStopwatch = (swName: string): Stopwatch => {\n  return {\n    name: swName,\n    swID: randomUUID(),\n    timeStarted: new Date(),\n    timeElapsed: -99,\n    lastPaused: \"----\",\n    pauseElapsed: 0,\n  };\n};\n\nconst processStopwatches = (swSet: Stopwatch[]) => {\n  swSet.map((x) => {\n    if (x.lastPaused != \"----\") {\n      x.timeElapsed = Math.max(0, secondsBetweenDates({ d1: x.lastPaused, d2: x.timeStarted }) - x.pauseElapsed);\n    } else {\n      const rawElapsedTime = Math.max(0, secondsBetweenDates({ d2: x.timeStarted }));\n      x.timeElapsed = rawElapsedTime - x.pauseElapsed;\n    }\n  });\n  return swSet;\n};\n\nconst getStopwatches = () => {\n  ensureSWFileExists();\n  const rawStopwatches: Stopwatch[] = JSON.parse(readFileSync(SWPATH).toString());\n  const fullStopwatchSet = cleanUpOldStopwatches(rawStopwatches);\n  const setOfStopwatches = processStopwatches(fullStopwatchSet);\n  setOfStopwatches.sort((a, b) => {\n    return a.timeElapsed - b.timeElapsed;\n  });\n  return setOfStopwatches;\n};\n\nconst startStopwatch = async ({ swName = \"Untitled\", launchedFromMenuBar = false }: StopwatchLaunchConfig) => {\n  ensureSWFileExists();\n  const swStore: Stopwatch[] = JSON.parse(readFileSync(SWPATH).toString());\n  const newTimer = initStopwatch(swName);\n  swStore.push(newTimer);\n  writeFileSync(SWPATH, JSON.stringify(swStore));\n\n  showHudOrToast({ msg: `Stopwatch \"${swName}\" started!`, launchedFromMenuBar: launchedFromMenuBar, isErr: false });\n};\n\nconst pauseStopwatch = (swToPause: string) => {\n  ensureSWFileExists();\n  let swStore: Stopwatch[] = JSON.parse(readFileSync(SWPATH).toString());\n  swStore = swStore.map((s) => (s.swID == swToPause ? { ...s, lastPaused: new Date() } : s));\n  writeFileSync(SWPATH, JSON.stringify(swStore));\n};\n\nconst unpauseStopwatch = (swToUnpause: string) => {\n  ensureSWFileExists();\n  let swStore: Stopwatch[] = JSON.parse(readFileSync(SWPATH).toString());\n  swStore = swStore.map((s) =>\n    s.swID == swToUnpause\n      ? {\n          ...s,\n          pauseElapsed: s.pauseElapsed + secondsBetweenDates({ d2: s.lastPaused }),\n          lastPaused: \"----\",\n        }\n      : s,\n  );\n  writeFileSync(SWPATH, JSON.stringify(swStore));\n};\n\nconst stopStopwatch = (swToDelete: string) => {\n  ensureSWFileExists();\n  let swStore: Stopwatch[] = JSON.parse(readFileSync(SWPATH).toString());\n  swStore = swStore.filter((s: Stopwatch) => s.swID !== swToDelete);\n  writeFileSync(SWPATH, JSON.stringify(swStore));\n};\n\nconst cleanUpOldStopwatches = (newStore: Stopwatch[]) => {\n  const files = readdirSync(environment.supportPath);\n  files.forEach((swFile: string) => {\n    if (extname(swFile) == \".stopwatch\") {\n      const stopwatch = initStopwatch(readFileSync(environment.supportPath + \"/\" + swFile).toString());\n      const timeStarted = swFile.replace(/__/g, \":\").replace(\".stopwatch\", \"\");\n      stopwatch.timeStarted = new Date(timeStarted);\n      stopwatch.timeElapsed = Math.max(0, secondsBetweenDates({}));\n      execSync(`rm \"${environment.supportPath}/${swFile}\"`);\n      newStore.push(stopwatch);\n    }\n  });\n  writeFileSync(SWPATH, JSON.stringify(newStore));\n  return newStore;\n};\n\nconst renameStopwatch = (swID: string, newName: string) => {\n  ensureSWFileExists();\n  const stopwatches: Stopwatch[] = JSON.parse(readFileSync(SWPATH, \"utf8\"));\n  const renamedSW = stopwatches.map((x) => (x.swID == swID ? { ...x, name: newName } : x));\n  writeFileSync(SWPATH, JSON.stringify(renamedSW));\n};\n\nexport { getStopwatches, pauseStopwatch, unpauseStopwatch, startStopwatch, stopStopwatch, renameStopwatch };\n", "import {\n  Icon,\n  Toast,\n  confirmAlert,\n  environment,\n  getPreferenceValues,\n  popToRoot,\n  showHUD,\n  showToast,\n} from \"@raycast/api\";\nimport { Preferences } from \"./types\";\nimport { existsSync, writeFileSync } from \"fs\";\n\nconst shortCircuitMenuBar = <T>(state: T[] | undefined, prefs: Preferences): boolean => {\n  return (\n    (state == undefined || state.length == 0 || state.length == undefined) &&\n    ![\"always\", \"onlyWhenNotRunning\"].includes(prefs.showMenuBarIconWhen)\n  );\n};\n\nconst showHudOrToast = (args: { msg: string; launchedFromMenuBar: boolean; isErr: boolean }) => {\n  const prefs: Preferences = getPreferenceValues();\n  if (args.launchedFromMenuBar || prefs.closeWindowOnTimerStart) {\n    const msgEmoji = args.isErr ? \"\u26A0\uFE0F\" : \"\uD83C\uDF89\";\n    showHUD(`${msgEmoji} ${args.msg}`);\n    return popToRoot();\n  } else {\n    showToast({ style: args.isErr ? Toast.Style.Failure : Toast.Style.Success, title: args.msg });\n  }\n};\n\nconst showInitialRingContinuouslyWarning = async (): Promise<boolean> => {\n  const RINGCONTINUOUSLY_SHOWN_PATH = environment.supportPath + \"/ringContinuouslyWarningShown\";\n  const prefs = getPreferenceValues<Preferences>();\n  if (!prefs.ringContinuously) return true;\n  if (existsSync(RINGCONTINUOUSLY_SHOWN_PATH)) return true;\n\n  const result = await confirmAlert({\n    title: \"Ring Continuously is enabled!\",\n    icon: Icon.Bell,\n    message:\n      'When the timer rings, you will need to use the \"Stop Running Timer\" command or stop the timer in the \"Manage Timers\" command to dismiss the sound. You can configure this in your Raycast settings.',\n  });\n  if (result) writeFileSync(RINGCONTINUOUSLY_SHOWN_PATH, \"\");\n  return result;\n};\n\nexport { shortCircuitMenuBar, showHudOrToast, showInitialRingContinuouslyWarning };\n", "import { Action, Icon, useNavigation } from \"@raycast/api\";\nimport { RenameView, RenameViewProps } from \"./RenameView\";\n\ninterface RenameActionProps extends RenameViewProps {\n  renameLabel: string;\n}\n\nexport default function RenameAction(props: RenameActionProps) {\n  const { push } = useNavigation();\n\n  return (\n    <Action\n      title={`Rename ${props.renameLabel}`}\n      icon={Icon.TextInput}\n      onAction={() =>\n        push(<RenameView currentName={props.currentName} originalFile={props.originalFile} ctID={props.ctID} />)\n      }\n    />\n  );\n}\n", "import { Action, ActionPanel, Form, Toast, useNavigation } from \"@raycast/api\";\nimport { renameStopwatch } from \"../backend/stopwatchBackend\";\nimport { renameCustomTimer, renameTimer } from \"../backend/timerBackend\";\nimport { showHudOrToast } from \"../backend/utils\";\n\ninterface RenameViewProps {\n  currentName: string;\n  originalFile: string;\n  ctID: string | null;\n}\n\nfunction RenameView(props: RenameViewProps) {\n  const { pop } = useNavigation();\n  const handleSubmit = (newName: string) => {\n    if (newName === \"\" || newName === props.currentName) {\n      const toast = new Toast({ style: Toast.Style.Failure, title: \"No new name given!\" });\n      toast.show();\n    } else {\n      pop();\n      switch (props.originalFile) {\n        case \"customTimer\":\n          renameCustomTimer(props.ctID ? props.ctID : \"-99\", newName);\n          break;\n        case \"stopwatch\":\n          renameStopwatch(props.ctID ? props.ctID : \"-99\", newName);\n          break;\n        default:\n          renameTimer(props.originalFile, newName);\n          break;\n      }\n\n      showHudOrToast({ msg: `Renamed to ${newName}!`, launchedFromMenuBar: false, isErr: false });\n    }\n  };\n\n  return (\n    <Form\n      actions={\n        <ActionPanel>\n          <Action.SubmitForm title=\"Rename\" onSubmit={(values: { newName: string }) => handleSubmit(values.newName)} />\n        </ActionPanel>\n      }\n    >\n      <Form.TextField id=\"newName\" title=\"New name\" placeholder={props.currentName} />\n    </Form>\n  );\n}\n\nexport { type RenameViewProps, RenameView };\n", "import { environment, getPreferenceValues } from \"@raycast/api\";\nimport { exec } from \"child_process\";\nimport { randomUUID } from \"crypto\";\nimport { existsSync, readdirSync, readFileSync, unlinkSync, writeFileSync } from \"fs\";\nimport { extname } from \"path\";\nimport { CustomTimer, Preferences, RawTimer, Timer, TimerLaunchConfig } from \"./types\";\nimport { formatTime, secondsBetweenDates } from \"./formatUtils\";\nimport { showHudOrToast, showInitialRingContinuouslyWarning } from \"./utils\";\nimport { kill } from \"process\";\n\nconst DATAPATH = environment.supportPath + \"/customTimers.json\";\nconst DEFAULT_PRESET_VISIBLES_FILE = environment.supportPath + \"/defaultPresetVisibles.json\";\n\nconst silentFileDeletion = (fp: string) => {\n  try {\n    unlinkSync(fp);\n  } catch (err) {\n    // only throw if it's not a \"file doesn't exist\" error\n    if (err instanceof Error && !err.message.includes(\"ENOENT\")) throw err;\n  }\n};\n\nconst checkForOverlyLoudAlert = (launchedFromMenuBar = false) => {\n  const prefs = getPreferenceValues<Preferences>();\n  if (parseFloat(prefs.volumeSetting) > 5.0) {\n    const errorMsg = \"Timer alert volume should not be louder than 5 (it can get quite loud!)\";\n    showHudOrToast({ msg: errorMsg, launchedFromMenuBar: launchedFromMenuBar, isErr: true });\n    return false;\n  }\n  return true;\n};\n\nasync function startTimer({\n  timeInSeconds,\n  timerName = \"Untitled\",\n  launchedFromMenuBar = false,\n  selectedSound = \"default\",\n  skipRingContinuouslyWarning = false,\n}: TimerLaunchConfig) {\n  if (!skipRingContinuouslyWarning) {\n    if (!(await showInitialRingContinuouslyWarning())) return;\n  }\n  const fileName = environment.supportPath + \"/\" + new Date().toISOString() + \"---\" + timeInSeconds + \".timer\";\n  const masterName = fileName.replace(/:/g, \"__\");\n\n  const prefs = getPreferenceValues<Preferences>();\n  if (prefs.ringContinuously) {\n    const dismissFile = `${masterName}`.replace(\".timer\", \".dismiss\");\n    writeFileSync(dismissFile, \".dismiss file for Timers\");\n  }\n\n  const cmd = buildTimerCommand(masterName, timerName, timeInSeconds, selectedSound);\n\n  const process = exec(cmd, (error, stderr) => {\n    if (error) {\n      console.log(`error: ${error.message}`);\n      return;\n    }\n    if (stderr) {\n      console.log(`stderr: ${stderr}`);\n      return;\n    }\n  });\n\n  const fileContents: RawTimer = {\n    name: timerName,\n    pid: process.pid,\n    lastPaused: \"---\",\n    pauseElapsed: 0,\n    selectedSound: selectedSound === \"default\" ? prefs.selectedSound : selectedSound,\n  };\n  writeFileSync(masterName, JSON.stringify(fileContents));\n  showHudOrToast({\n    msg: `Timer \"${timerName}\" started for ${formatTime(timeInSeconds)}!`,\n    launchedFromMenuBar: launchedFromMenuBar,\n    isErr: false,\n  });\n}\n\nfunction buildTimerCommand(\n  masterName: string,\n  timerName: string,\n  timeInSeconds: number,\n  selectedSound: string,\n): string {\n  const prefs = getPreferenceValues<Preferences>();\n  const selectedSoundPath = `${\n    environment.assetsPath + \"/\" + (selectedSound === \"default\" ? prefs.selectedSound : selectedSound)\n  }`;\n  const cmdParts = [`sleep ${timeInSeconds}`];\n  cmdParts.push(\n    `if [ -f \"${masterName}\" ]; then osascript -e 'display notification \"Timer \\\\\"${timerName}\\\\\" complete\" with title \"Ding!\"'`,\n  );\n  const alertSoundString =\n    prefs.selectedSound === \"speak_timer_name\"\n      ? `say ${timerName}`\n      : `afplay \"${selectedSoundPath}\" --volume ${prefs.volumeSetting.replace(\",\", \".\")}`;\n  cmdParts.push(alertSoundString);\n  if (prefs.ringContinuously) {\n    const dismissFile = `${masterName}`.replace(\".timer\", \".dismiss\");\n    cmdParts.push(`while [ -f \"${dismissFile}\" ]; do ${alertSoundString}; done`);\n  }\n  cmdParts.push(`rm \"${masterName}\"; else echo \"Timer deleted\"; fi`);\n  return cmdParts.join(\" ; \");\n}\n\nfunction stopTimer(timerFile: string) {\n  const timerFilePath = environment.supportPath + \"/\" + timerFile;\n  const dismissFile = timerFilePath.replace(\".timer\", \".dismiss\");\n  silentFileDeletion(timerFilePath);\n  silentFileDeletion(dismissFile);\n}\n\nfunction pauseTimer(timerFile: string, timerPid: number) {\n  const timerFilePath = environment.supportPath + \"/\" + timerFile;\n  kill(timerPid);\n\n  const rawFileContents = readFileSync(timerFilePath).toString();\n  const fileContents: RawTimer = JSON.parse(rawFileContents);\n  fileContents.pid = undefined;\n  fileContents.lastPaused = new Date();\n  writeFileSync(timerFilePath, JSON.stringify(fileContents));\n}\n\nfunction unpauseTimer(timer: Timer) {\n  const timerFilePath = environment.supportPath + \"/\" + timer.originalFile;\n\n  const cmd = buildTimerCommand(timerFilePath, timer.name, timer.timeLeft, timer.selectedSound);\n  const process = exec(cmd);\n\n  const rawFileContents = readFileSync(timerFilePath).toString();\n  const fileContents: RawTimer = JSON.parse(rawFileContents);\n  fileContents.pauseElapsed = fileContents.pauseElapsed + secondsBetweenDates({ d2: timer.lastPaused });\n  fileContents.lastPaused = \"---\";\n  fileContents.pid = process.pid;\n  writeFileSync(timerFilePath, JSON.stringify(fileContents));\n}\n\nfunction getTimers() {\n  const setOfTimers: Timer[] = [];\n  const files = readdirSync(environment.supportPath);\n  files.forEach((timerFile: string) => {\n    if (extname(timerFile) == \".timer\") {\n      const timer: Timer = {\n        name: \"\",\n        secondsSet: -99,\n        timeLeft: -99,\n        originalFile: timerFile,\n        timeEnds: new Date(),\n        pid: undefined,\n        lastPaused: \"---\",\n        pauseElapsed: 0,\n        selectedSound: \"default\",\n      };\n      const rawFileContents = readFileSync(environment.supportPath + \"/\" + timerFile).toString();\n      try {\n        const fileContents: RawTimer = JSON.parse(rawFileContents);\n        timer.name = fileContents.name;\n        timer.pid = fileContents.pid;\n        timer.lastPaused = fileContents.lastPaused;\n        timer.pauseElapsed = fileContents.pauseElapsed;\n        timer.selectedSound = fileContents.selectedSound;\n      } catch (error) {\n        if (!(error instanceof SyntaxError)) throw error;\n        timer.name = rawFileContents;\n      }\n\n      const timerFileParts = timerFile.split(\"---\");\n      timer.secondsSet = Number(timerFileParts[1].split(\".\")[0]);\n      const timeStarted = timerFileParts[0].replace(/__/g, \":\");\n      timer.timeEnds = new Date(timeStarted);\n      timer.timeEnds.setSeconds(timer.timeEnds.getSeconds() + timer.secondsSet + timer.pauseElapsed);\n      timer.timeLeft = Math.max(\n        0,\n        Math.round(\n          timer.pid === undefined\n            ? timer.secondsSet -\n                secondsBetweenDates({\n                  d1: timer.lastPaused === \"---\" ? undefined : timer.lastPaused,\n                  d2: new Date(timeStarted),\n                }) +\n                timer.pauseElapsed\n            : secondsBetweenDates({ d1: timer.timeEnds }),\n        ),\n      );\n      setOfTimers.push(timer);\n    }\n  });\n  setOfTimers.sort((a, b) => {\n    return a.timeLeft - b.timeLeft;\n  });\n  return setOfTimers;\n}\n\nfunction renameTimer(timerFile: string, newName: string) {\n  const timerFilePath = environment.supportPath + \"/\" + timerFile;\n  const rawFileContents = readFileSync(timerFilePath).toString();\n  const fileContents: RawTimer = JSON.parse(rawFileContents);\n  fileContents.name = newName;\n  writeFileSync(timerFilePath, JSON.stringify(fileContents));\n}\n\nfunction ensureCTFileExists() {\n  if (!existsSync(DATAPATH)) {\n    writeFileSync(DATAPATH, JSON.stringify({}));\n  }\n}\n\nfunction createCustomTimer(newTimer: CustomTimer) {\n  ensureCTFileExists();\n  const customTimers = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  customTimers[randomUUID()] = newTimer;\n  writeFileSync(DATAPATH, JSON.stringify(customTimers));\n}\n\nfunction readCustomTimers() {\n  ensureCTFileExists();\n  const res: Record<string, CustomTimer> = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  return Object.fromEntries(\n    Object.entries(res).map(([ctID, timer]) =>\n      timer.showInMenuBar === undefined ? [ctID, { ...timer, showInMenuBar: true }] : [ctID, timer],\n    ),\n  );\n}\n\nfunction renameCustomTimer(ctID: string, newName: string) {\n  ensureCTFileExists();\n  const customTimers = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  customTimers[ctID].name = newName;\n  writeFileSync(DATAPATH, JSON.stringify(customTimers));\n}\n\nfunction deleteCustomTimer(ctID: string) {\n  ensureCTFileExists();\n  const customTimers = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  delete customTimers[ctID];\n  writeFileSync(DATAPATH, JSON.stringify(customTimers));\n}\n\nfunction toggleCustomTimerMenubarVisibility(ctID: string) {\n  ensureCTFileExists();\n  const customTimers = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  const currentVisibility = customTimers[ctID].showInMenuBar;\n  customTimers[ctID].showInMenuBar = currentVisibility === undefined ? false : !currentVisibility;\n  writeFileSync(DATAPATH, JSON.stringify(customTimers));\n}\n\nconst readDefaultPresetVisibles = (): Record<string, boolean> => {\n  if (!existsSync(DEFAULT_PRESET_VISIBLES_FILE)) {\n    const defaultPresetVisibles = {\n      \"2M\": true,\n      \"5M\": true,\n      \"10M\": true,\n      \"15M\": true,\n      \"30M\": true,\n      \"45M\": true,\n      \"60M\": true,\n      \"90M\": true,\n    };\n    writeFileSync(DEFAULT_PRESET_VISIBLES_FILE, JSON.stringify(defaultPresetVisibles));\n    return defaultPresetVisibles;\n  }\n  const res: Record<string, boolean> = JSON.parse(readFileSync(DEFAULT_PRESET_VISIBLES_FILE, \"utf8\"));\n  return res;\n};\n\nconst toggleDefaultPresetVisibility = (key: string) => {\n  const data: Record<string, boolean> = JSON.parse(readFileSync(DEFAULT_PRESET_VISIBLES_FILE, \"utf8\"));\n  data[key] = !data[key];\n  writeFileSync(DEFAULT_PRESET_VISIBLES_FILE, JSON.stringify(data));\n};\n\nexport {\n  checkForOverlyLoudAlert,\n  createCustomTimer,\n  deleteCustomTimer,\n  ensureCTFileExists,\n  getTimers,\n  readCustomTimers,\n  renameTimer,\n  renameCustomTimer,\n  toggleCustomTimerMenubarVisibility,\n  startTimer,\n  stopTimer,\n  pauseTimer,\n  unpauseTimer,\n  readDefaultPresetVisibles,\n  toggleDefaultPresetVisibility,\n};\n"],
  "mappings": "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",
  "names": ["manageStopwatches_exports", "__export", "Command", "__toCommonJS", "import_api", "import_react", "import_api", "import_react", "formatTime", "seconds", "hours", "mins", "secs", "formatDateTime", "d", "parsedDate", "datevalues", "timevalues", "x", "date", "time", "secondsBetweenDates", "args", "import_api", "import_child_process", "import_crypto", "import_fs", "import_path", "import_api", "showHudOrToast", "args", "prefs", "msgEmoji", "SWPATH", "ensureSWFileExists", "initStopwatch", "swName", "processStopwatches", "swSet", "x", "secondsBetweenDates", "rawElapsedTime", "getStopwatches", "rawStopwatches", "fullStopwatchSet", "cleanUpOldStopwatches", "setOfStopwatches", "a", "b", "startStopwatch", "launchedFromMenuBar", "swStore", "newTimer", "showHudOrToast", "pauseStopwatch", "swToPause", "s", "unpauseStopwatch", "swToUnpause", "stopStopwatch", "swToDelete", "newStore", "swFile", "stopwatch", "timeStarted", "renameStopwatch", "swID", "newName", "renamedSW", "useStopwatches", "stopwatches", "setStopwatches", "isLoading", "setIsLoading", "refreshSWes", "setOfStopwatches", "getStopwatches", "handleStartSW", "launchConf", "startStopwatch", "handlePauseSW", "swID", "pauseStopwatch", "handleUnpauseSW", "unpauseStopwatch", "handleStopSW", "stopwatch", "formatTime", "stopStopwatch", "import_api", "import_api", "import_api", "import_fs", "DATAPATH", "DEFAULT_PRESET_VISIBLES_FILE", "renameTimer", "timerFile", "newName", "timerFilePath", "rawFileContents", "fileContents", "ensureCTFileExists", "DATAPATH", "renameCustomTimer", "ctID", "newName", "ensureCTFileExists", "customTimers", "DATAPATH", "import_jsx_runtime", "RenameView", "props", "pop", "handleSubmit", "newName", "renameCustomTimer", "renameStopwatch", "renameTimer", "showHudOrToast", "values", "import_jsx_runtime", "RenameAction", "props", "push", "RenameView", "import_jsx_runtime", "Command", "stopwatches", "isLoading", "refreshSWes", "handleRestartSW", "handleStartSW", "handleStopSW", "handlePauseSW", "handleUnpauseSW", "useStopwatches", "pausedTag", "unpausedTag", "pausedIcon", "unpausedIcon", "sw", "formatTime", "formatDateTime", "RenameAction"]
}
