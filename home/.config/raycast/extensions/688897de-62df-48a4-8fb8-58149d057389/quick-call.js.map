{
  "version": 3,
  "sources": ["../node_modules/is-docker/index.js", "../node_modules/is-wsl/index.js", "../node_modules/define-lazy-prop/index.js", "../node_modules/open/index.js", "../src/quick-call.tsx"],
  "sourcesContent": ["'use strict';\nconst fs = require('fs');\n\nlet isDocker;\n\nfunction hasDockerEnv() {\n\ttry {\n\t\tfs.statSync('/.dockerenv');\n\t\treturn true;\n\t} catch (_) {\n\t\treturn false;\n\t}\n}\n\nfunction hasDockerCGroup() {\n\ttry {\n\t\treturn fs.readFileSync('/proc/self/cgroup', 'utf8').includes('docker');\n\t} catch (_) {\n\t\treturn false;\n\t}\n}\n\nmodule.exports = () => {\n\tif (isDocker === undefined) {\n\t\tisDocker = hasDockerEnv() || hasDockerCGroup();\n\t}\n\n\treturn isDocker;\n};\n", "'use strict';\nconst os = require('os');\nconst fs = require('fs');\nconst isDocker = require('is-docker');\n\nconst isWsl = () => {\n\tif (process.platform !== 'linux') {\n\t\treturn false;\n\t}\n\n\tif (os.release().toLowerCase().includes('microsoft')) {\n\t\tif (isDocker()) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\ttry {\n\t\treturn fs.readFileSync('/proc/version', 'utf8').toLowerCase().includes('microsoft') ?\n\t\t\t!isDocker() : false;\n\t} catch (_) {\n\t\treturn false;\n\t}\n};\n\nif (process.env.__IS_WSL_TEST__) {\n\tmodule.exports = isWsl;\n} else {\n\tmodule.exports = isWsl();\n}\n", "'use strict';\nmodule.exports = (object, propertyName, fn) => {\n\tconst define = value => Object.defineProperty(object, propertyName, {value, enumerable: true, writable: true});\n\n\tObject.defineProperty(object, propertyName, {\n\t\tconfigurable: true,\n\t\tenumerable: true,\n\t\tget() {\n\t\t\tconst result = fn();\n\t\t\tdefine(result);\n\t\t\treturn result;\n\t\t},\n\t\tset(value) {\n\t\t\tdefine(value);\n\t\t}\n\t});\n\n\treturn object;\n};\n", "const path = require('path');\nconst childProcess = require('child_process');\nconst {promises: fs, constants: fsConstants} = require('fs');\nconst isWsl = require('is-wsl');\nconst isDocker = require('is-docker');\nconst defineLazyProperty = require('define-lazy-prop');\n\n// Path to included `xdg-open`.\nconst localXdgOpenPath = path.join(__dirname, 'xdg-open');\n\nconst {platform, arch} = process;\n\n// Podman detection\nconst hasContainerEnv = () => {\n\ttry {\n\t\tfs.statSync('/run/.containerenv');\n\t\treturn true;\n\t} catch {\n\t\treturn false;\n\t}\n};\n\nlet cachedResult;\nfunction isInsideContainer() {\n\tif (cachedResult === undefined) {\n\t\tcachedResult = hasContainerEnv() || isDocker();\n\t}\n\n\treturn cachedResult;\n}\n\n/**\nGet the mount point for fixed drives in WSL.\n\n@inner\n@returns {string} The mount point.\n*/\nconst getWslDrivesMountPoint = (() => {\n\t// Default value for \"root\" param\n\t// according to https://docs.microsoft.com/en-us/windows/wsl/wsl-config\n\tconst defaultMountPoint = '/mnt/';\n\n\tlet mountPoint;\n\n\treturn async function () {\n\t\tif (mountPoint) {\n\t\t\t// Return memoized mount point value\n\t\t\treturn mountPoint;\n\t\t}\n\n\t\tconst configFilePath = '/etc/wsl.conf';\n\n\t\tlet isConfigFileExists = false;\n\t\ttry {\n\t\t\tawait fs.access(configFilePath, fsConstants.F_OK);\n\t\t\tisConfigFileExists = true;\n\t\t} catch {}\n\n\t\tif (!isConfigFileExists) {\n\t\t\treturn defaultMountPoint;\n\t\t}\n\n\t\tconst configContent = await fs.readFile(configFilePath, {encoding: 'utf8'});\n\t\tconst configMountPoint = /(?<!#.*)root\\s*=\\s*(?<mountPoint>.*)/g.exec(configContent);\n\n\t\tif (!configMountPoint) {\n\t\t\treturn defaultMountPoint;\n\t\t}\n\n\t\tmountPoint = configMountPoint.groups.mountPoint.trim();\n\t\tmountPoint = mountPoint.endsWith('/') ? mountPoint : `${mountPoint}/`;\n\n\t\treturn mountPoint;\n\t};\n})();\n\nconst pTryEach = async (array, mapper) => {\n\tlet latestError;\n\n\tfor (const item of array) {\n\t\ttry {\n\t\t\treturn await mapper(item); // eslint-disable-line no-await-in-loop\n\t\t} catch (error) {\n\t\t\tlatestError = error;\n\t\t}\n\t}\n\n\tthrow latestError;\n};\n\nconst baseOpen = async options => {\n\toptions = {\n\t\twait: false,\n\t\tbackground: false,\n\t\tnewInstance: false,\n\t\tallowNonzeroExitCode: false,\n\t\t...options\n\t};\n\n\tif (Array.isArray(options.app)) {\n\t\treturn pTryEach(options.app, singleApp => baseOpen({\n\t\t\t...options,\n\t\t\tapp: singleApp\n\t\t}));\n\t}\n\n\tlet {name: app, arguments: appArguments = []} = options.app || {};\n\tappArguments = [...appArguments];\n\n\tif (Array.isArray(app)) {\n\t\treturn pTryEach(app, appName => baseOpen({\n\t\t\t...options,\n\t\t\tapp: {\n\t\t\t\tname: appName,\n\t\t\t\targuments: appArguments\n\t\t\t}\n\t\t}));\n\t}\n\n\tlet command;\n\tconst cliArguments = [];\n\tconst childProcessOptions = {};\n\n\tif (platform === 'darwin') {\n\t\tcommand = 'open';\n\n\t\tif (options.wait) {\n\t\t\tcliArguments.push('--wait-apps');\n\t\t}\n\n\t\tif (options.background) {\n\t\t\tcliArguments.push('--background');\n\t\t}\n\n\t\tif (options.newInstance) {\n\t\t\tcliArguments.push('--new');\n\t\t}\n\n\t\tif (app) {\n\t\t\tcliArguments.push('-a', app);\n\t\t}\n\t} else if (platform === 'win32' || (isWsl && !isInsideContainer() && !app)) {\n\t\tconst mountPoint = await getWslDrivesMountPoint();\n\n\t\tcommand = isWsl ?\n\t\t\t`${mountPoint}c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe` :\n\t\t\t`${process.env.SYSTEMROOT}\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell`;\n\n\t\tcliArguments.push(\n\t\t\t'-NoProfile',\n\t\t\t'-NonInteractive',\n\t\t\t'\u2013ExecutionPolicy',\n\t\t\t'Bypass',\n\t\t\t'-EncodedCommand'\n\t\t);\n\n\t\tif (!isWsl) {\n\t\t\tchildProcessOptions.windowsVerbatimArguments = true;\n\t\t}\n\n\t\tconst encodedArguments = ['Start'];\n\n\t\tif (options.wait) {\n\t\t\tencodedArguments.push('-Wait');\n\t\t}\n\n\t\tif (app) {\n\t\t\t// Double quote with double quotes to ensure the inner quotes are passed through.\n\t\t\t// Inner quotes are delimited for PowerShell interpretation with backticks.\n\t\t\tencodedArguments.push(`\"\\`\"${app}\\`\"\"`, '-ArgumentList');\n\t\t\tif (options.target) {\n\t\t\t\tappArguments.unshift(options.target);\n\t\t\t}\n\t\t} else if (options.target) {\n\t\t\tencodedArguments.push(`\"${options.target}\"`);\n\t\t}\n\n\t\tif (appArguments.length > 0) {\n\t\t\tappArguments = appArguments.map(arg => `\"\\`\"${arg}\\`\"\"`);\n\t\t\tencodedArguments.push(appArguments.join(','));\n\t\t}\n\n\t\t// Using Base64-encoded command, accepted by PowerShell, to allow special characters.\n\t\toptions.target = Buffer.from(encodedArguments.join(' '), 'utf16le').toString('base64');\n\t} else {\n\t\tif (app) {\n\t\t\tcommand = app;\n\t\t} else {\n\t\t\t// When bundled by Webpack, there's no actual package file path and no local `xdg-open`.\n\t\t\tconst isBundled = !__dirname || __dirname === '/';\n\n\t\t\t// Check if local `xdg-open` exists and is executable.\n\t\t\tlet exeLocalXdgOpen = false;\n\t\t\ttry {\n\t\t\t\tawait fs.access(localXdgOpenPath, fsConstants.X_OK);\n\t\t\t\texeLocalXdgOpen = true;\n\t\t\t} catch {}\n\n\t\t\tconst useSystemXdgOpen = process.versions.electron ||\n\t\t\t\tplatform === 'android' || isBundled || !exeLocalXdgOpen;\n\t\t\tcommand = useSystemXdgOpen ? 'xdg-open' : localXdgOpenPath;\n\t\t}\n\n\t\tif (appArguments.length > 0) {\n\t\t\tcliArguments.push(...appArguments);\n\t\t}\n\n\t\tif (!options.wait) {\n\t\t\t// `xdg-open` will block the process unless stdio is ignored\n\t\t\t// and it's detached from the parent even if it's unref'd.\n\t\t\tchildProcessOptions.stdio = 'ignore';\n\t\t\tchildProcessOptions.detached = true;\n\t\t}\n\t}\n\n\tif (options.target) {\n\t\tcliArguments.push(options.target);\n\t}\n\n\tif (platform === 'darwin' && appArguments.length > 0) {\n\t\tcliArguments.push('--args', ...appArguments);\n\t}\n\n\tconst subprocess = childProcess.spawn(command, cliArguments, childProcessOptions);\n\n\tif (options.wait) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tsubprocess.once('error', reject);\n\n\t\t\tsubprocess.once('close', exitCode => {\n\t\t\t\tif (!options.allowNonzeroExitCode && exitCode > 0) {\n\t\t\t\t\treject(new Error(`Exited with code ${exitCode}`));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresolve(subprocess);\n\t\t\t});\n\t\t});\n\t}\n\n\tsubprocess.unref();\n\n\treturn subprocess;\n};\n\nconst open = (target, options) => {\n\tif (typeof target !== 'string') {\n\t\tthrow new TypeError('Expected a `target`');\n\t}\n\n\treturn baseOpen({\n\t\t...options,\n\t\ttarget\n\t});\n};\n\nconst openApp = (name, options) => {\n\tif (typeof name !== 'string') {\n\t\tthrow new TypeError('Expected a `name`');\n\t}\n\n\tconst {arguments: appArguments = []} = options || {};\n\tif (appArguments !== undefined && appArguments !== null && !Array.isArray(appArguments)) {\n\t\tthrow new TypeError('Expected `appArguments` as Array type');\n\t}\n\n\treturn baseOpen({\n\t\t...options,\n\t\tapp: {\n\t\t\tname,\n\t\t\targuments: appArguments\n\t\t}\n\t});\n};\n\nfunction detectArchBinary(binary) {\n\tif (typeof binary === 'string' || Array.isArray(binary)) {\n\t\treturn binary;\n\t}\n\n\tconst {[arch]: archBinary} = binary;\n\n\tif (!archBinary) {\n\t\tthrow new Error(`${arch} is not supported`);\n\t}\n\n\treturn archBinary;\n}\n\nfunction detectPlatformBinary({[platform]: platformBinary}, {wsl}) {\n\tif (wsl && isWsl) {\n\t\treturn detectArchBinary(wsl);\n\t}\n\n\tif (!platformBinary) {\n\t\tthrow new Error(`${platform} is not supported`);\n\t}\n\n\treturn detectArchBinary(platformBinary);\n}\n\nconst apps = {};\n\ndefineLazyProperty(apps, 'chrome', () => detectPlatformBinary({\n\tdarwin: 'google chrome',\n\twin32: 'chrome',\n\tlinux: ['google-chrome', 'google-chrome-stable', 'chromium']\n}, {\n\twsl: {\n\t\tia32: '/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe',\n\t\tx64: ['/mnt/c/Program Files/Google/Chrome/Application/chrome.exe', '/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe']\n\t}\n}));\n\ndefineLazyProperty(apps, 'firefox', () => detectPlatformBinary({\n\tdarwin: 'firefox',\n\twin32: 'C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe',\n\tlinux: 'firefox'\n}, {\n\twsl: '/mnt/c/Program Files/Mozilla Firefox/firefox.exe'\n}));\n\ndefineLazyProperty(apps, 'edge', () => detectPlatformBinary({\n\tdarwin: 'microsoft edge',\n\twin32: 'msedge',\n\tlinux: ['microsoft-edge', 'microsoft-edge-dev']\n}, {\n\twsl: '/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe'\n}));\n\nopen.apps = apps;\nopen.openApp = openApp;\n\nmodule.exports = open;\n", "import { getSelectedText, LaunchProps, showHUD } from \"@raycast/api\";\nimport open from \"open\";\n\nexport default async function Command(props: LaunchProps<{ arguments: Arguments.QuickCall }>) {\n  const { fallbackText } = props;\n  const { number } = props.arguments;\n\n  let dialNumber = fallbackText || number;\n\n  if (dialNumber === \"\") {\n    try {\n      const selectedText = await getSelectedText();\n      if (selectedText !== \"\") {\n        dialNumber = selectedText;\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  // This line removes any non-numeric characters (except for the plus sign)\n  // from the dialNumber string.\n  dialNumber = dialNumber.replace(/[^0-9+]/g, \"\").trim();\n\n  // If the input is empty, show an error toast and return\n  if (dialNumber.length === 0) {\n    await showHUD(\"You must enter a number before setting up a call\");\n    return;\n  }\n\n  try {\n    await open(`tel://${dialNumber}`);\n    await showHUD(`Opening facetime calling ${dialNumber}...`);\n  } catch (error) {\n    if (error instanceof Error) {\n      await showHUD(error.message);\n    }\n  }\n}\n"],
  "mappings": "onBAAA,IAAAA,EAAAC,EAAA,CAAAC,GAAAC,IAAA,cACA,IAAMC,EAAK,QAAQ,IAAI,EAEnBC,EAEJ,SAASC,GAAe,CACvB,GAAI,CACH,OAAAF,EAAG,SAAS,aAAa,EAClB,EACR,MAAE,CACD,MAAO,EACR,CACD,CAEA,SAASG,GAAkB,CAC1B,GAAI,CACH,OAAOH,EAAG,aAAa,oBAAqB,MAAM,EAAE,SAAS,QAAQ,CACtE,MAAE,CACD,MAAO,EACR,CACD,CAEAD,EAAO,QAAU,KACZE,IAAa,SAChBA,EAAWC,EAAa,GAAKC,EAAgB,GAGvCF,KC3BR,IAAAG,EAAAC,EAAA,CAAAC,GAAAC,IAAA,cACA,IAAMC,EAAK,QAAQ,IAAI,EACjBC,EAAK,QAAQ,IAAI,EACjBC,EAAW,IAEXC,EAAQ,IAAM,CACnB,GAAI,QAAQ,WAAa,QACxB,MAAO,GAGR,GAAIH,EAAG,QAAQ,EAAE,YAAY,EAAE,SAAS,WAAW,EAClD,MAAI,CAAAE,EAAS,EAOd,GAAI,CACH,OAAOD,EAAG,aAAa,gBAAiB,MAAM,EAAE,YAAY,EAAE,SAAS,WAAW,EACjF,CAACC,EAAS,EAAI,EAChB,MAAE,CACD,MAAO,EACR,CACD,EAEI,QAAQ,IAAI,gBACfH,EAAO,QAAUI,EAEjBJ,EAAO,QAAUI,EAAM,IC7BxB,IAAAC,EAAAC,EAAA,CAAAC,GAAAC,IAAA,cACAA,EAAO,QAAU,CAACC,EAAQC,EAAcC,IAAO,CAC9C,IAAMC,EAASC,GAAS,OAAO,eAAeJ,EAAQC,EAAc,CAAC,MAAAG,EAAO,WAAY,GAAM,SAAU,EAAI,CAAC,EAE7G,cAAO,eAAeJ,EAAQC,EAAc,CAC3C,aAAc,GACd,WAAY,GACZ,KAAM,CACL,IAAMI,EAASH,EAAG,EAClB,OAAAC,EAAOE,CAAM,EACNA,CACR,EACA,IAAID,EAAO,CACVD,EAAOC,CAAK,CACb,CACD,CAAC,EAEMJ,CACR,IClBA,IAAAM,EAAAC,EAAA,CAAAC,GAAAC,IAAA,KAAMC,GAAO,QAAQ,MAAM,EACrBC,GAAe,QAAQ,eAAe,EACtC,CAAC,SAAUC,EAAI,UAAWC,CAAW,EAAI,QAAQ,IAAI,EACrDC,EAAQ,IACRC,GAAW,IACXC,EAAqB,IAGrBC,EAAmBP,GAAK,KAAK,UAAW,UAAU,EAElD,CAAC,SAAAQ,EAAU,KAAAC,CAAI,EAAI,QAGnBC,GAAkB,IAAM,CAC7B,GAAI,CACH,OAAAR,EAAG,SAAS,oBAAoB,EACzB,EACR,MAAE,CACD,MAAO,EACR,CACD,EAEIS,EACJ,SAASC,IAAoB,CAC5B,OAAID,IAAiB,SACpBA,EAAeD,GAAgB,GAAKL,GAAS,GAGvCM,CACR,CAQA,IAAME,IAA0B,IAAM,CAGrC,IAAMC,EAAoB,QAEtBC,EAEJ,OAAO,gBAAkB,CACxB,GAAIA,EAEH,OAAOA,EAGR,IAAMC,EAAiB,gBAEnBC,EAAqB,GACzB,GAAI,CACH,MAAMf,EAAG,OAAOc,EAAgBb,EAAY,IAAI,EAChDc,EAAqB,EACtB,MAAE,CAAO,CAET,GAAI,CAACA,EACJ,OAAOH,EAGR,IAAMI,EAAgB,MAAMhB,EAAG,SAASc,EAAgB,CAAC,SAAU,MAAM,CAAC,EACpEG,EAAmB,wCAAwC,KAAKD,CAAa,EAEnF,OAAKC,GAILJ,EAAaI,EAAiB,OAAO,WAAW,KAAK,EACrDJ,EAAaA,EAAW,SAAS,GAAG,EAAIA,EAAa,GAAGA,KAEjDA,GANCD,CAOT,CACD,GAAG,EAEGM,EAAW,MAAOC,EAAOC,IAAW,CACzC,IAAIC,EAEJ,QAAWC,KAAQH,EAClB,GAAI,CACH,OAAO,MAAMC,EAAOE,CAAI,CACzB,OAASC,EAAP,CACDF,EAAcE,CACf,CAGD,MAAMF,CACP,EAEMG,EAAW,MAAMC,GAAW,CASjC,GARAA,EAAU,CACT,KAAM,GACN,WAAY,GACZ,YAAa,GACb,qBAAsB,GACtB,GAAGA,CACJ,EAEI,MAAM,QAAQA,EAAQ,GAAG,EAC5B,OAAOP,EAASO,EAAQ,IAAKC,GAAaF,EAAS,CAClD,GAAGC,EACH,IAAKC,CACN,CAAC,CAAC,EAGH,GAAI,CAAC,KAAMC,EAAK,UAAWC,EAAe,CAAC,CAAC,EAAIH,EAAQ,KAAO,CAAC,EAGhE,GAFAG,EAAe,CAAC,GAAGA,CAAY,EAE3B,MAAM,QAAQD,CAAG,EACpB,OAAOT,EAASS,EAAKE,GAAWL,EAAS,CACxC,GAAGC,EACH,IAAK,CACJ,KAAMI,EACN,UAAWD,CACZ,CACD,CAAC,CAAC,EAGH,IAAIE,EACEC,EAAe,CAAC,EAChBC,EAAsB,CAAC,EAE7B,GAAI1B,IAAa,SAChBwB,EAAU,OAENL,EAAQ,MACXM,EAAa,KAAK,aAAa,EAG5BN,EAAQ,YACXM,EAAa,KAAK,cAAc,EAG7BN,EAAQ,aACXM,EAAa,KAAK,OAAO,EAGtBJ,GACHI,EAAa,KAAK,KAAMJ,CAAG,UAElBrB,IAAa,SAAYJ,GAAS,CAACQ,GAAkB,GAAK,CAACiB,EAAM,CAC3E,IAAMd,EAAa,MAAMF,GAAuB,EAEhDmB,EAAU5B,EACT,GAAGW,4DACH,GAAG,QAAQ,IAAI,4DAEhBkB,EAAa,KACZ,aACA,kBACA,wBACA,SACA,iBACD,EAEK7B,IACJ8B,EAAoB,yBAA2B,IAGhD,IAAMC,EAAmB,CAAC,OAAO,EAE7BR,EAAQ,MACXQ,EAAiB,KAAK,OAAO,EAG1BN,GAGHM,EAAiB,KAAK,OAAON,QAAW,eAAe,EACnDF,EAAQ,QACXG,EAAa,QAAQH,EAAQ,MAAM,GAE1BA,EAAQ,QAClBQ,EAAiB,KAAK,IAAIR,EAAQ,SAAS,EAGxCG,EAAa,OAAS,IACzBA,EAAeA,EAAa,IAAIM,GAAO,OAAOA,OAAS,EACvDD,EAAiB,KAAKL,EAAa,KAAK,GAAG,CAAC,GAI7CH,EAAQ,OAAS,OAAO,KAAKQ,EAAiB,KAAK,GAAG,EAAG,SAAS,EAAE,SAAS,QAAQ,MAC/E,CACN,GAAIN,EACHG,EAAUH,MACJ,CAEN,IAAMQ,EAAY,CAAC,WAAa,YAAc,IAG1CC,EAAkB,GACtB,GAAI,CACH,MAAMpC,EAAG,OAAOK,EAAkBJ,EAAY,IAAI,EAClDmC,EAAkB,EACnB,MAAE,CAAO,CAITN,EAFyB,QAAQ,SAAS,UACzCxB,IAAa,WAAa6B,GAAa,CAACC,EACZ,WAAa/B,EAGvCuB,EAAa,OAAS,GACzBG,EAAa,KAAK,GAAGH,CAAY,EAG7BH,EAAQ,OAGZO,EAAoB,MAAQ,SAC5BA,EAAoB,SAAW,IAI7BP,EAAQ,QACXM,EAAa,KAAKN,EAAQ,MAAM,EAG7BnB,IAAa,UAAYsB,EAAa,OAAS,GAClDG,EAAa,KAAK,SAAU,GAAGH,CAAY,EAG5C,IAAMS,EAAatC,GAAa,MAAM+B,EAASC,EAAcC,CAAmB,EAEhF,OAAIP,EAAQ,KACJ,IAAI,QAAQ,CAACa,EAASC,IAAW,CACvCF,EAAW,KAAK,QAASE,CAAM,EAE/BF,EAAW,KAAK,QAASG,GAAY,CACpC,GAAI,CAACf,EAAQ,sBAAwBe,EAAW,EAAG,CAClDD,EAAO,IAAI,MAAM,oBAAoBC,GAAU,CAAC,EAChD,OAGDF,EAAQD,CAAU,CACnB,CAAC,CACF,CAAC,GAGFA,EAAW,MAAM,EAEVA,EACR,EAEMI,EAAO,CAACC,EAAQjB,IAAY,CACjC,GAAI,OAAOiB,GAAW,SACrB,MAAM,IAAI,UAAU,qBAAqB,EAG1C,OAAOlB,EAAS,CACf,GAAGC,EACH,OAAAiB,CACD,CAAC,CACF,EAEMC,GAAU,CAACC,EAAMnB,IAAY,CAClC,GAAI,OAAOmB,GAAS,SACnB,MAAM,IAAI,UAAU,mBAAmB,EAGxC,GAAM,CAAC,UAAWhB,EAAe,CAAC,CAAC,EAAIH,GAAW,CAAC,EACnD,GAAkCG,GAAiB,MAAQ,CAAC,MAAM,QAAQA,CAAY,EACrF,MAAM,IAAI,UAAU,uCAAuC,EAG5D,OAAOJ,EAAS,CACf,GAAGC,EACH,IAAK,CACJ,KAAAmB,EACA,UAAWhB,CACZ,CACD,CAAC,CACF,EAEA,SAASiB,EAAiBC,EAAQ,CACjC,GAAI,OAAOA,GAAW,UAAY,MAAM,QAAQA,CAAM,EACrD,OAAOA,EAGR,GAAM,CAAC,CAACvC,CAAI,EAAGwC,CAAU,EAAID,EAE7B,GAAI,CAACC,EACJ,MAAM,IAAI,MAAM,GAAGxC,oBAAuB,EAG3C,OAAOwC,CACR,CAEA,SAASC,EAAqB,CAAC,CAAC1C,CAAQ,EAAG2C,CAAc,EAAG,CAAC,IAAAC,CAAG,EAAG,CAClE,GAAIA,GAAOhD,EACV,OAAO2C,EAAiBK,CAAG,EAG5B,GAAI,CAACD,EACJ,MAAM,IAAI,MAAM,GAAG3C,oBAA2B,EAG/C,OAAOuC,EAAiBI,CAAc,CACvC,CAEA,IAAME,EAAO,CAAC,EAEd/C,EAAmB+C,EAAM,SAAU,IAAMH,EAAqB,CAC7D,OAAQ,gBACR,MAAO,SACP,MAAO,CAAC,gBAAiB,uBAAwB,UAAU,CAC5D,EAAG,CACF,IAAK,CACJ,KAAM,kEACN,IAAK,CAAC,4DAA6D,iEAAiE,CACrI,CACD,CAAC,CAAC,EAEF5C,EAAmB+C,EAAM,UAAW,IAAMH,EAAqB,CAC9D,OAAQ,UACR,MAAO,kDACP,MAAO,SACR,EAAG,CACF,IAAK,kDACN,CAAC,CAAC,EAEF5C,EAAmB+C,EAAM,OAAQ,IAAMH,EAAqB,CAC3D,OAAQ,iBACR,MAAO,SACP,MAAO,CAAC,iBAAkB,oBAAoB,CAC/C,EAAG,CACF,IAAK,kEACN,CAAC,CAAC,EAEFP,EAAK,KAAOU,EACZV,EAAK,QAAUE,GAEf9C,EAAO,QAAU4C,IC7UjB,IAAAW,GAAA,GAAAC,EAAAD,GAAA,aAAAE,IAAA,eAAAC,EAAAH,IAAA,IAAAI,EAAsD,wBACtDC,EAAiB,OAEjB,eAAOH,EAA+BI,EAAwD,CAC5F,GAAM,CAAE,aAAAC,CAAa,EAAID,EACnB,CAAE,OAAAE,CAAO,EAAIF,EAAM,UAErBG,EAAaF,GAAgBC,EAEjC,GAAIC,IAAe,GACjB,GAAI,CACF,IAAMC,EAAe,QAAM,mBAAgB,EACvCA,IAAiB,KACnBD,EAAaC,EAEjB,OAASC,EAAP,CACA,QAAQ,MAAMA,CAAK,CACrB,CAQF,GAHAF,EAAaA,EAAW,QAAQ,WAAY,EAAE,EAAE,KAAK,EAGjDA,EAAW,SAAW,EAAG,CAC3B,QAAM,WAAQ,kDAAkD,EAChE,OAGF,GAAI,CACF,QAAM,EAAAG,SAAK,SAASH,GAAY,EAChC,QAAM,WAAQ,4BAA4BA,MAAe,CAC3D,OAASE,EAAP,CACIA,aAAiB,OACnB,QAAM,WAAQA,EAAM,OAAO,CAE/B,CACF",
  "names": ["require_is_docker", "__commonJSMin", "exports", "module", "fs", "isDocker", "hasDockerEnv", "hasDockerCGroup", "require_is_wsl", "__commonJSMin", "exports", "module", "os", "fs", "isDocker", "isWsl", "require_define_lazy_prop", "__commonJSMin", "exports", "module", "object", "propertyName", "fn", "define", "value", "result", "require_open", "__commonJSMin", "exports", "module", "path", "childProcess", "fs", "fsConstants", "isWsl", "isDocker", "defineLazyProperty", "localXdgOpenPath", "platform", "arch", "hasContainerEnv", "cachedResult", "isInsideContainer", "getWslDrivesMountPoint", "defaultMountPoint", "mountPoint", "configFilePath", "isConfigFileExists", "configContent", "configMountPoint", "pTryEach", "array", "mapper", "latestError", "item", "error", "baseOpen", "options", "singleApp", "app", "appArguments", "appName", "command", "cliArguments", "childProcessOptions", "encodedArguments", "arg", "isBundled", "exeLocalXdgOpen", "subprocess", "resolve", "reject", "exitCode", "open", "target", "openApp", "name", "detectArchBinary", "binary", "archBinary", "detectPlatformBinary", "platformBinary", "wsl", "apps", "quick_call_exports", "__export", "Command", "__toCommonJS", "import_api", "import_open", "props", "fallbackText", "number", "dialNumber", "selectedText", "error", "open"]
}
