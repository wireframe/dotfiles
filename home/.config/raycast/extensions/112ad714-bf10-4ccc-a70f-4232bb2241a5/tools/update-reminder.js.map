{
  "version": 3,
  "sources": ["../../src/tools/update-reminder.ts", "swift:/Users/runner/work/extensions/extensions/extensions/apple-reminders/swift/AppleReminders"],
  "sourcesContent": ["import { updateReminder } from \"swift:../../swift/AppleReminders\";\n\nimport { Frequency } from \"../create-reminder\";\n\ntype Input = {\n  /**\n   * The ID of the reminder to update.\n   */\n  reminderId: string;\n  /**\n   * The new title of the reminder.\n   */\n  title?: string;\n  /**\n   * The new notes for the reminder.\n   */\n  notes?: string;\n  /**\n   * The new due date. Can either be a full day date (YYYY-MM-DD) or an ISO date if the time is specified (YYYY-MM-DDTHH:mm:ss.sssZ).\n   */\n  dueDate?: string;\n  /**\n   * The new priority of the reminder.\n   */\n  priority?: \"high\" | \"medium\" | \"low\";\n  /**\n   * Whether the reminder is completed.\n   */\n  isCompleted?: boolean;\n  /**\n   * The recurrence settings.\n   */\n  recurrence?: {\n    /**\n     * Recurrence frequency. Only pick the value from this list: \"daily\", \"weekly\", \"monthly\", \"yearly\".\n     */\n    frequency: Frequency;\n    /**\n     * Recurrence interval. An integer greater than 0 that specifies how often a pattern repeats. If a recurrence frequency is \"weekly\" rule and the interval is 1, then the pattern repeats every week. If a recurrence frequency is \"monthly\" rule and the interval is 3, then the pattern repeats every 3 months.\n     */\n    interval: number;\n    /**\n     * Recurrence end date. A full day date (YYYY-MM-DD). If no end date is specified, the recurrence will repeat forever.\n     */\n    endDate?: string;\n  };\n};\n\nexport default async function (input: Input) {\n  if (input.dueDate && input.dueDate.includes(\"T\")) {\n    input.dueDate = new Date(input.dueDate).toISOString();\n  }\n\n  const reminder = await updateReminder(input);\n  return reminder;\n}\n", "\nimport { environment } from \"@raycast/api\";\nimport { join } from \"path\";\nimport { chmod } from \"fs/promises\";\nimport { spawn } from \"child_process\";\n\nasync function runSwiftFunction(command, ...args) {\n  const swiftPath = join(environment.assetsPath, \"compiled_raycast_swift/AppleReminders\");\n  await chmod(swiftPath, \"755\");\n\n  return new Promise((resolve, reject) => {\n    const commandArgs = [command];\n    for (const arg of args) {\n      try {\n        commandArgs.push(JSON.stringify(arg, (k, v) => v === undefined ? null : v));\n      } catch (err) {\n        reject(new SwiftError(\"Failed to serialize input to JSON: \" + err.message));\n        return;\n      }\n    }\n    const child = spawn(swiftPath, commandArgs);\n    const stdout = [];\n    const stderr = [];\n\n    child.stdout?.on(\"data\", (data) => {\n      stdout.push(data.toString());\n    });\n    child.stderr?.on(\"data\", (data) => {\n      stderr.push(data.toString());\n    });\n\n    child.on(\"exit\", (code) => {\n      if (code === 0) {\n        try {\n          const result = stdout.join(\"\").trim();\n          if (result.length != 0) {\n            resolve(JSON.parse(result));\n          } else {\n            resolve(null);\n          }\n        } catch (err) {\n          const error = new SwiftError(\"Failed to deserialize result from JSON: \" + err.message);\n          error.stdout = stdout.join(\"\").trim();\n          error.stderr = stderr.join(\"\").trim();\n          reject(error);\n        }\n      } else {\n        const error = new SwiftError(stderr.join(\"\").trim() || stdout.join(\"\").trim() || \"Could not get any data\");\n        error.stdout = stdout.join(\"\").trim();\n        error.stderr = stderr.join(\"\").trim();\n        reject(error);\n      }\n    });\n\n    child.on(\"error\", (error) => {\n      reject(error);\n    });\n  });\n}\n\nexport async function getData() {\n  return await runSwiftFunction(\"getData\")\n}\n\nexport async function getCompletedReminders(listId) {\n  return await runSwiftFunction(\"getCompletedReminders\", listId)\n}\n\nexport async function createReminder(newReminder) {\n  return await runSwiftFunction(\"createReminder\", newReminder)\n}\n\nexport async function setTitleAndNotes(payload) {\n  return await runSwiftFunction(\"setTitleAndNotes\", payload)\n}\n\nexport async function toggleCompletionStatus(reminderId) {\n  return await runSwiftFunction(\"toggleCompletionStatus\", reminderId)\n}\n\nexport async function setPriorityStatus(payload) {\n  return await runSwiftFunction(\"setPriorityStatus\", payload)\n}\n\nexport async function setDueDate(payload) {\n  return await runSwiftFunction(\"setDueDate\", payload)\n}\n\nexport async function deleteReminder(reminderId) {\n  return await runSwiftFunction(\"deleteReminder\", reminderId)\n}\n\nexport async function setLocation(payload) {\n  return await runSwiftFunction(\"setLocation\", payload)\n}\n\nexport async function updateReminder(payload) {\n  return await runSwiftFunction(\"updateReminder\", payload)\n}\n\nexport class SwiftError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"SwiftError\";\n  }\n}\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GCCA,IAAAI,EAA4B,wBAC5BC,EAAqB,gBACrBC,EAAsB,uBACtBC,EAAsB,yBAEtB,eAAeC,EAAiBC,KAAYC,EAAM,CAChD,IAAMC,KAAY,QAAK,cAAY,WAAY,uCAAuC,EACtF,eAAM,SAAMA,EAAW,KAAK,EAErB,IAAI,QAAQ,CAACC,EAASC,IAAW,CACtC,IAAMC,EAAc,CAACL,CAAO,EAC5B,QAAWM,KAAOL,EAChB,GAAI,CACFI,EAAY,KAAK,KAAK,UAAUC,EAAK,CAACC,EAAGC,IAAMA,IAAM,OAAY,KAAOA,CAAC,CAAC,CAC5E,OAASC,EAAK,CACZL,EAAO,IAAIM,EAAW,sCAAwCD,EAAI,OAAO,CAAC,EAC1E,MACF,CAEF,IAAME,KAAQ,SAAMT,EAAWG,CAAW,EACpCO,EAAS,CAAC,EACVC,EAAS,CAAC,EAEhBF,EAAM,QAAQ,GAAG,OAASG,GAAS,CACjCF,EAAO,KAAKE,EAAK,SAAS,CAAC,CAC7B,CAAC,EACDH,EAAM,QAAQ,GAAG,OAASG,GAAS,CACjCD,EAAO,KAAKC,EAAK,SAAS,CAAC,CAC7B,CAAC,EAEDH,EAAM,GAAG,OAASI,GAAS,CACzB,GAAIA,IAAS,EACX,GAAI,CACF,IAAMC,EAASJ,EAAO,KAAK,EAAE,EAAE,KAAK,EAChCI,EAAO,QAAU,EACnBb,EAAQ,KAAK,MAAMa,CAAM,CAAC,EAE1Bb,EAAQ,IAAI,CAEhB,OAASM,EAAK,CACZ,IAAMQ,EAAQ,IAAIP,EAAW,2CAA6CD,EAAI,OAAO,EACrFQ,EAAM,OAASL,EAAO,KAAK,EAAE,EAAE,KAAK,EACpCK,EAAM,OAASJ,EAAO,KAAK,EAAE,EAAE,KAAK,EACpCT,EAAOa,CAAK,CACd,KACK,CACL,IAAMA,EAAQ,IAAIP,EAAWG,EAAO,KAAK,EAAE,EAAE,KAAK,GAAKD,EAAO,KAAK,EAAE,EAAE,KAAK,GAAK,wBAAwB,EACzGK,EAAM,OAASL,EAAO,KAAK,EAAE,EAAE,KAAK,EACpCK,EAAM,OAASJ,EAAO,KAAK,EAAE,EAAE,KAAK,EACpCT,EAAOa,CAAK,CACd,CACF,CAAC,EAEDN,EAAM,GAAG,QAAUM,GAAU,CAC3Bb,EAAOa,CAAK,CACd,CAAC,CACH,CAAC,CACH,CAsCA,eAAsBC,EAAeC,EAAS,CAC5C,OAAO,MAAMC,EAAiB,iBAAkBD,CAAO,CACzD,CAEO,IAAME,EAAN,cAAyB,KAAM,CACpC,YAAYC,EAAS,CACnB,MAAMA,CAAO,EACb,KAAK,KAAO,YACd,CACF,EDzDA,eAAOC,EAAwBC,EAAc,CAC3C,OAAIA,EAAM,SAAWA,EAAM,QAAQ,SAAS,GAAG,IAC7CA,EAAM,QAAU,IAAI,KAAKA,EAAM,OAAO,EAAE,YAAY,GAGrC,MAAMC,EAAeD,CAAK,CAE7C",
  "names": ["update_reminder_exports", "__export", "update_reminder_default", "__toCommonJS", "import_api", "import_path", "import_promises", "import_child_process", "runSwiftFunction", "command", "args", "swiftPath", "resolve", "reject", "commandArgs", "arg", "k", "v", "err", "SwiftError", "child", "stdout", "stderr", "data", "code", "result", "error", "updateReminder", "payload", "runSwiftFunction", "SwiftError", "message", "update_reminder_default", "input", "updateReminder"]
}
