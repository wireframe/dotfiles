<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string></string>
	<key>category</key>
	<string>Tools</string>
	<key>connections</key>
	<dict>
		<key>7DD3BDE5-A157-42E5-9376-F681FB50A4EE</key>
		<array/>
	</dict>
	<key>createdby</key>
	<string>Jaspal Sahota</string>
	<key>description</key>
	<string>Thesaurus query</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>Thesaurus</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>0</integer>
				<key>escaping</key>
				<integer>0</integer>
				<key>keyword</key>
				<string>thes</string>
				<key>script</key>
				<string>try

# get the workflow's source folder
set workflowFolder to (do shell script "pwd")

# load the Workflow library
set wlib to load script POSIX file (workflowFolder &amp; "/q_workflow.scpt")

# create a new Workflow Class
set wf to wlib's new_workflow()

# start parsing the argument
set q to wf's q_trim("{query}")

# if no argument, show the initial feedback
if length of q = 0 then
	add_result of wf without isValid given theUid:"q_err", theArg:"q_err", theTitle:"Search on Twitter", theSubtitle:"Type your query and see the tweets", theIcon:"", theAutocomplete:"", theType:""
	return wf's to_xml("")
end if

# if we have an argument, encode it
# so that we can pass it as part
# of the Twitter search URL
set theQuery to wlib's q_encode_url("{query}")
set theQuery to "http://thesaurus.altervista.org/thesaurus/v1?output=json&amp;word=" &amp; theQuery &amp; "&amp;language=en_US&amp;output=json&amp;key=DeEKsEOVyiP0NyBZlQ5g"

# obtain the JSON feeds from Twitter
set json to wf's request_json(theQuery)
 
# if nothing was returned, show error feedback
if json is missing value then
	add_result of wf without isValid given theUid:"q_err", theArg:"q_err", theTitle:"Thesaurus Service Error", theSubtitle:"Could not connect to Thesaurus API", theIcon:"icons/error.png", theAutocomplete:"", theType:""
	return wf's to_xml("")
end if

try
	set returnedResults to count of |response| of json
on error
	
	set errorCount to count of |error| of json
# if no results were found, show error feedback
		add_result of wf without isValid given theUid:"q_err", theArg:"q_err", theTitle:"Nothing Found", theSubtitle:"Could not find {query} :(", theIcon:"icons/error.png", theAutocomplete:"", theType:""
	return wf's to_xml("")
end try



# otherwise start building the list of results
repeat with i from 1 to returnedResults
	# obtain all the necessary info for the current entry
	set resultRef to a reference to item i of |response| of json

	set theSynonym to |synonyms| of |list| of resultRef
	set theSynonym to findAndReplace("|",", ", theSynonym)
	set theID to |synonyms| of |list| of resultRef
	set theCategory to |category| of |list| of resultRef


	# add the result to Alfred's feedback list
	add_result of wf with isValid given theUid:theID, theArg:theSynonym, theTitle:theSynonym, theSubtitle:theCategory, theIcon:"", theAutocomplete:"", theType:""
end repeat

# show the feedback results
return wf's to_xml("")

on error msg
	# in case of an error, send a Notification to MacOS
	wlib's q_send_notification("ERROR", msg, "")
end try
on findAndReplace(tofind, toreplace, TheString)
   set ditd to text item delimiters
   set text item delimiters to tofind
   set textItems to text items of TheString
   set text item delimiters to toreplace
   if (class of TheString is string) then
       set res to textItems as string
   else -- if (class of TheString is Unicode text) then
       set res to textItems as Unicode text
   end if
   set text item delimiters to ditd
   return res
end findAndReplace</string>
				<key>title</key>
				<string>Thesaurus</string>
				<key>type</key>
				<integer>6</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>7DD3BDE5-A157-42E5-9376-F681FB50A4EE</string>
		</dict>
	</array>
	<key>readme</key>
	<string>Based on Alp, by phylisstein and borrows (very) heavily from phylisstein's twitter example.</string>
	<key>uidata</key>
	<dict>
		<key>7DD3BDE5-A157-42E5-9376-F681FB50A4EE</key>
		<dict>
			<key>ypos</key>
			<real>60</real>
		</dict>
	</dict>
	<key>webaddress</key>
	<string>www.vitispr.com/jas</string>
</dict>
</plist>
